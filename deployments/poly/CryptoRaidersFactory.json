{
  "address": "0x49FD82d8faBD0359DcD0A5fD408873532D8E733B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StrategyFactory",
          "name": "_strategyFactory",
          "type": "address"
        },
        {
          "internalType": "contract IZap",
          "name": "_zap",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultChef",
          "name": "vaultChef",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "projectData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "deployStrategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyFactory",
      "outputs": [
        {
          "internalType": "contract StrategyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zap",
      "outputs": [
        {
          "internalType": "contract IZap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb911d826b6f5204f7a439d8ad76d126f95595802a1610cfe133d49feef0409ac",
  "receipt": {
    "to": "0xdbfD940f57E63049039404c1b35b9e47e90F2B3e",
    "from": "0xa66745F0092F7460F107E4c66C224553bF4Cd727",
    "contractAddress": null,
    "transactionIndex": 52,
    "gasUsed": "1589410",
    "logsBloom": "0x
    "blockHash": "0x43c2821fbb6199b3ae0bc362101ba53d01aa9c334964a7181aa575279445e087",
    "transactionHash": "0xb911d826b6f5204f7a439d8ad76d126f95595802a1610cfe133d49feef0409ac",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 23574295,
        "transactionHash": "0xb911d826b6f5204f7a439d8ad76d126f95595802a1610cfe133d49feef0409ac",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ba577aa8ee54000000000000000000000000000000000000000000000000018ed5376dc7ae062600000000000000000000000000000000000000000001096b865f6991514f103b0000000000000000000000000000000000000000000000018e1adff31ebfb22600000000000000000000000000000000000000000001096b8719c10bfa3d643b",
        "logIndex": 169,
        "blockHash": "0x43c2821fbb6199b3ae0bc362101ba53d01aa9c334964a7181aa575279445e087"
      }
    ],
    "blockNumber": 23574295,
    "cumulativeGasUsed": "7597191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x53635b33A3F52A7E71c0970e0Ba5c35E08070d92",
    "0xAfEf94984f3C3665e72F1a8d4634659621dA18A0"
  ],
  "solcInputHash": "70605475fab0997a48c2c4d21162e4d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StrategyFactory\",\"name\":\"_strategyFactory\",\"type\":\"address\"},{\"internalType\":\"contract IZap\",\"name\":\"_zap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IVaultChef\",\"name\":\"vaultChef\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"projectData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"deployStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyFactory\",\"outputs\":[{\"internalType\":\"contract StrategyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"contract IZap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Project data: (address masterchef, address rewardToken) Strategy data: (uint256 pid)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/CryptoRaidersFactory.sol\":\"CryptoRaidersFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2d8b1825d587f3384d6d87655f3cb66f0d71fe8dda7d98f2f9267a4bb842927d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf87bd7a150c81aad67bb354413fe55cb005e922c6e48d3580a63e32efa913c74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9dc1ad66ada6a503bef1ffde62ac688c58eac660fe50c054f6e49e3b27ae295d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@violinio/defi-interfaces/contracts/ICryptoRaidersStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICryptoRaidersStaking {\\n    function addressStakedBalance(address _address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function bigMultiplier() external view returns (uint256);\\n\\n    function createStake(uint256 _amount) external;\\n\\n    function dailyEmissionsRate() external view returns (uint256);\\n\\n    function emergencyUnstake(uint256 _amount) external;\\n\\n    function getRewards() external;\\n\\n    function isStaker(address _address) external view returns (bool);\\n\\n    function lastRewardTime() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function removeStake(uint256 _amount) external;\\n\\n    function rewardsBalance() external view returns (uint256);\\n\\n    function showBigRewardsPerToken() external view returns (uint256);\\n\\n    function showBigUserRewardsCollected() external view returns (uint256);\\n\\n    function showRewardToken() external view returns (address);\\n\\n    function showStakingToken() external view returns (address);\\n\\n    function timeSinceLastReward() external view returns (uint256);\\n\\n    function totalStakedSupply() external view returns (uint256);\\n\\n    function updateBigRewardsPerToken() external;\\n\\n    function userPendingRewards(address _address)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe633db81e57f73081904d1d6aad210a62861b9cf17c354606132fad469835c85\",\"license\":\"MIT\"},\"contracts/factories/CryptoRaidersFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/ISubFactory.sol\\\";\\nimport \\\"../strategies/StrategyCryptoRaiders.sol\\\";\\nimport \\\"./StrategyFactory.sol\\\";\\n/**\\n * Project data: (address masterchef, address rewardToken)\\n * Strategy data: (uint256 pid)\\n */\\ncontract CryptoRaidersFactory is ISubFactory {\\n    StrategyFactory public immutable strategyFactory;\\n    IZap public zap;\\n\\n    constructor(StrategyFactory _strategyFactory, IZap _zap) {\\n        strategyFactory = _strategyFactory;\\n        zap = _zap;\\n    }\\n\\n    function deployStrategy(\\n        IVaultChef vaultChef,\\n        IERC20 underlyingToken,\\n        bytes calldata projectData,\\n        bytes calldata strategyData\\n    ) external override returns (IStrategy) {\\n        require(msg.sender == address(strategyFactory));\\n        (IERC20 rewardToken) = abi.decode(projectData, (IERC20));\\n        (ICryptoRaidersStaking staking) = abi.decode(strategyData, (ICryptoRaidersStaking));\\n        // validate underlying masterchef\\n        _validateStaking(staking, underlyingToken, rewardToken);\\n        \\n        // initialize strategy\\n        StrategyCryptoRaiders strategy = new StrategyCryptoRaiders();\\n        strategy.initialize(vaultChef, zap, underlyingToken, IERC20(rewardToken), staking);\\n        \\n        return strategy;\\n    }\\n\\n    function _validateStaking(ICryptoRaidersStaking staking, IERC20 underlyingToken, IERC20 rewardsToken) internal view {\\n        try  staking.showRewardToken() returns (address _rewardsToken) {\\n            require(address(rewardsToken) == _rewardsToken, \\\"!incorrect rewardsToken\\\");\\n        } catch {\\n            revert(\\\"!no rewardsToken\\\");\\n        }\\n        try  staking.showStakingToken() returns (address _stakingToken) {\\n            require(address(underlyingToken) == _stakingToken, \\\"!incorrect stakingToken\\\");\\n        } catch {\\n            revert(\\\"!no stakingToken\\\");\\n        }\\n\\n        try staking.addressStakedBalance(address(this)) returns (uint256 amount) {\\n            amount;//sh\\n        } catch {\\n            revert(\\\"!incorrect balance function\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x97d13d6af65f5b3e886d89ebf3a716cb7760e7ced6794be78ff2b0dc3f057a70\",\"license\":\"MIT\"},\"contracts/factories/StrategyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IVaultChef.sol\\\";\\nimport \\\"../interfaces/ISubFactory.sol\\\";\\nimport \\\"../interfaces/IZapHandler.sol\\\";\\nimport \\\"../interfaces/IZap.sol\\\";\\n\\n/// @notice The strategy factory is a utility contracts used by Violin to deploy new strategies more swiftly and securely.\\n/// @notice The admin can register strategy types together with a SubFactory that creates instances of the relevant strategy type.\\n/// @notice Examples of strategy types are MC_PCS_V1, MC_GOOSE_V1, MC_PANTHER_V1...\\n/// @notice Once a few types are registered, new strategies can be easily deployed by registering the relevant project and then instantiating strategies on that project.\\n/// @dev All strategy types, projects and individual strategies are stored as keccak256 hashes. The deployed strategies are identified by keccak256(keccak256(projectId), keccak256(strategyId)).\\n/// @dev VAULTCHEF AUTH: The StrategyFactory must have the ADD_VAULT_ROLE on the governor.\\n/// @dev ZAPGOVERNANCE AUTH: The StrategyFactory must have the\\n\\n/// TODO: There is no createVault function!\\ncontract StrategyFactory is AccessControlEnumerableUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\\n    /// @notice The instance of the vaultChef to deploy strategies to.\\n    IVaultChef public vaultChef;\\n\\n    /// @notice The zapper\\n    IZap public zap;\\n\\n    //** STRATEGY TYPES **/\\n    /// @notice strategyTypes contains all registered hashed strategy types.\\n    EnumerableSetUpgradeable.Bytes32Set private strategyTypes;\\n    /// @notice Returns the registered subfactory of the strategy type. The subfactory is responsible for instantiating factories.\\n    mapping(bytes32 => ISubFactory) public subfactoryByType;\\n\\n    mapping(address => bool) public isSubfactory;\\n\\n    //** PROJECTS **/\\n    /// @notice All registered projects.\\n    EnumerableSetUpgradeable.Bytes32Set private projects;\\n    /// @notice The associated strategy type hash of the project. All strategies under the project will thus be deployed using the subfactory of this strategy type.\\n    mapping(bytes32 => bytes32) public projectStrategyType;\\n    /// @notice Generic parameters that will always be forwarded to the subfactory. This could for example be the native token.\\n    mapping(bytes32 => bytes) public projectParams;\\n    /// @notice Metadata associated with the project that can be used on the frontend, expected to be encoded in UTF-8 JSON.\\n    /// @notice Even though not ideomatic, this is a cheap solution to avoid infrastructure downtime within the first months after launch.\\n    mapping(bytes32 => bytes) public projectMetadata;\\n\\n    /// @notice List of strategies registered for the project.\\n    mapping(bytes32 => EnumerableSetUpgradeable.Bytes32Set)\\n        private projectStrategies;\\n\\n    //** STRATEGIES **/\\n\\n    /// @notice All registered strategies.\\n    /// @dev These are identified as keccak256(abi.encodePacked(keccak256(projectId), keccak256(strategyId))).\\n    EnumerableSetUpgradeable.Bytes32Set private strategies;\\n    /// @notice Metadata associated with the strategy that can be used on the frontend, expected to be encoded in UTF-8 JSON.\\n    /// @notice Even though not ideomatic, this is a cheap solution to avoid infrastructure downtime within the first months after launch.\\n    mapping(bytes32 => bytes) public strategyMetadata;\\n\\n    /// @notice Gets the vaultId associated with the strategyId.\\n    mapping(bytes32 => uint256) private strategyToVaultId;\\n    /// @notice Gets the strategy id associated with the vaultId.\\n    mapping(uint256 => bytes32) public vaultIdToStrategy;\\n\\n    /// @notice gets all strategy ids associated with an underlying token.\\n    mapping(IERC20 => EnumerableSetUpgradeable.Bytes32Set)\\n        private underlyingToStrategies;\\n\\n    bytes32 public constant REGISTER_STRATEGY_ROLE =\\n        keccak256(\\\"REGISTER_STRATEGY_ROLE\\\");\\n    bytes32 public constant REGISTER_PROJECT_ROLE =\\n        keccak256(\\\"REGISTER_PROJECT_ROLE\\\");\\n    bytes32 public constant CREATE_VAULT_ROLE = keccak256(\\\"CREATE_VAULT_ROLE\\\");\\n\\n    event StrategyTypeAdded(\\n        bytes32 indexed strategyType,\\n        ISubFactory indexed subfactory\\n    );\\n    event ProjectRegistered(\\n        bytes32 indexed projectId,\\n        bytes32 indexed strategyType,\\n        bool indexed isUpdate\\n    );\\n    event VaultRegistered(\\n        uint256 indexed vaultId,\\n        bytes32 indexed projectId,\\n        bytes32 indexed strategyId,\\n        bool isUpdate\\n    );\\n\\n    function initialize(IVaultChef _vaultChef, IZap _zap, address owner) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        vaultChef = _vaultChef;\\n        zap = _zap;\\n        vaultChef.poolLength(); // validate vaultChef\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\\n        _setupRole(REGISTER_STRATEGY_ROLE, owner);\\n        _setupRole(REGISTER_PROJECT_ROLE, owner);\\n        _setupRole(CREATE_VAULT_ROLE, owner);\\n    }\\n\\n    function registerStrategyType(\\n        string calldata strategyType,\\n        ISubFactory subfactory\\n    ) external onlyRole(REGISTER_STRATEGY_ROLE) {\\n        registerStrategyTypeRaw(\\n            keccak256(abi.encodePacked(strategyType)),\\n            subfactory\\n        );\\n    }\\n\\n    function registerStrategyTypeRaw(\\n        bytes32 strategyType,\\n        ISubFactory subfactory\\n    ) public onlyRole(REGISTER_STRATEGY_ROLE) {\\n        require(!strategyTypes.contains(strategyType), \\\"!exists\\\");\\n        strategyTypes.add(strategyType);\\n        subfactoryByType[strategyType] = subfactory;\\n        isSubfactory[address(subfactory)] = true;\\n\\n        emit StrategyTypeAdded(strategyType, subfactory);\\n    }\\n\\n    function registerProject(\\n        string calldata projectId,\\n        string calldata strategyType,\\n        bytes calldata params,\\n        bytes calldata metadata\\n    ) external onlyRole(REGISTER_PROJECT_ROLE) {\\n        registerProjectRaw(\\n            keccak256(abi.encodePacked(projectId)),\\n            keccak256(abi.encodePacked(strategyType)),\\n            params,\\n            metadata\\n        );\\n    }\\n\\n    function registerProjectRaw(\\n        bytes32 projectId,\\n        bytes32 strategyType,\\n        bytes calldata params,\\n        bytes calldata metadata\\n    ) public onlyRole(REGISTER_PROJECT_ROLE) {\\n        require(\\n            strategyTypes.contains(strategyType),\\n            \\\"!strategyType not found\\\"\\n        );\\n        bool exists = projects.contains(projectId);\\n        projectStrategyType[projectId] = strategyType;\\n        projectParams[projectId] = params;\\n        projectMetadata[projectId] = metadata;\\n\\n        emit ProjectRegistered(projectId, strategyType, exists);\\n    }\\n\\n    struct CreateVaultVars {\\n        bytes32 strategyUID;\\n        bool exists;\\n        IStrategy strategy;\\n        uint256 vaultId;\\n        bytes projectParams;\\n    }\\n\\n    function createVault(\\n        string calldata projectId,\\n        string calldata strategyId,\\n        IERC20 underlyingToken,\\n        bytes calldata params,\\n        bytes calldata metadata,\\n        uint16 performanceFee\\n    ) external onlyRole(CREATE_VAULT_ROLE) returns (uint256, IStrategy) {\\n        return\\n            createVaultRaw(\\n                keccak256(abi.encodePacked(projectId)),\\n                keccak256(abi.encodePacked(strategyId)),\\n                underlyingToken,\\n                params,\\n                metadata,\\n                performanceFee\\n            );\\n    }\\n\\n    function createVaultRaw(\\n        bytes32 projectId,\\n        bytes32 strategyId,\\n        IERC20 underlyingToken,\\n        bytes calldata params,\\n        bytes calldata metadata,\\n        uint16 performanceFee\\n    ) public onlyRole(CREATE_VAULT_ROLE) returns (uint256, IStrategy) {\\n        CreateVaultVars memory vars;\\n\\n        vars.strategyUID = getStrategyUID(projectId, strategyId);\\n        vars.exists = strategies.contains(vars.strategyUID);\\n        vars.projectParams = projectParams[projectId];\\n\\n        vars.strategy = subfactoryByType[projectStrategyType[projectId]]\\n            .deployStrategy(\\n                vaultChef,\\n                underlyingToken,\\n                vars.projectParams,\\n                params\\n            );\\n        vars.vaultId = vaultChef.poolLength();\\n        IVaultChef(vaultChef.owner()).addVault(vars.strategy, performanceFee); // .owner to get the governor which inherits the vaultchef interface\\n\\n        strategyMetadata[vars.strategyUID] = metadata;\\n\\n        // Indexing\\n        projectStrategies[projectId].add(vars.strategyUID);\\n        vaultIdToStrategy[vars.vaultId] = vars.strategyUID;\\n        strategyToVaultId[vars.strategyUID] = vars.vaultId;\\n        underlyingToStrategies[vars.strategy.underlyingToken()].add(\\n            vars.strategyUID\\n        );\\n\\n        emit VaultRegistered(vars.vaultId, projectId, strategyId, vars.exists);\\n        return (vars.vaultId, vars.strategy);\\n    }\\n\\n    function setRoute(address[] calldata route) external {\\n        require(isSubfactory[msg.sender], \\\"!subfactory\\\");\\n        // Only set the route if it actually exists.\\n        if (route.length > 0) {\\n            IERC20 from = IERC20(route[0]);\\n            IERC20 to = IERC20(route[route.length - 1]);\\n            IZapHandler zapHandler = IZapHandler(\\n                IZapHandler(zap.implementation()).owner()\\n            ); // go to the governance contract which mimics the IZapHandler interface\\n            if (zapHandler.routeLength(from, to) == 0) {\\n                zapHandler.setRoute(from, to, route);\\n            }\\n        }\\n    }\\n\\n    function getStrategyUID(bytes32 projectId, bytes32 strategyId)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(projectId, strategyId));\\n    }\\n\\n    //** VIEW FUNCTIONS **//\\n\\n    //** strategy types **/\\n\\n    /// @notice Returns whether the unhashed `strategyType` is registered.\\n    function isStrategyType(string calldata strategyType)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isStrategyTypeRaw(keccak256(abi.encodePacked(strategyType)));\\n    }\\n\\n    /// @notice Returns whether the hashed `strategyType` is registered.\\n    function isStrategyTypeRaw(bytes32 strategyType)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return strategyTypes.contains(strategyType);\\n    }\\n\\n    /// @notice Gets the length of the strategyType listing.\\n    function getStrategyTypeLength() public view returns (uint256) {\\n        return strategyTypes.length();\\n    }\\n\\n    /// @notice Gets the strategyType hash at a specific index in the listing.\\n    function getStrategyTypeAt(uint256 index) public view returns (bytes32) {\\n        return strategyTypes.at(index);\\n    }\\n\\n    /// @notice Lists the strategyType hashes within a specific range in the listing.\\n    function getStrategyTypes(uint256 from, uint256 amount)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return getPaginated(strategyTypes, from, amount);\\n    }\\n\\n    //** projects **/\\n\\n    /// @notice Returns whether the unhashed `projectId` is registered.\\n    function isProject(string calldata projectId) external view returns (bool) {\\n        return isStrategyTypeRaw(keccak256(abi.encodePacked(projectId)));\\n    }\\n\\n    /// @notice Returns whether the hashed `projectId` is registered.\\n    function isProjectRaw(bytes32 projectId) public view returns (bool) {\\n        return strategyTypes.contains(projectId);\\n    }\\n\\n    /// @notice Gets the length of the projects listing.\\n    function getProjectsLength() public view returns (uint256) {\\n        return projects.length();\\n    }\\n\\n    /// @notice Gets the project hash at a specific index in the listing.\\n    function getProjectAt(uint256 index) public view returns (bytes32) {\\n        return projects.at(index);\\n    }\\n\\n    /// @notice Lists the project hashes within a specific range in the listing.\\n    function getProjects(uint256 from, uint256 amount)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return getPaginated(projects, from, amount);\\n    }\\n\\n    /// @notice Gets the length (number) of strategies of a project listing.\\n    function getProjectStrategiesLength(string calldata projectId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            getProjectStrategiesLengthRaw(\\n                keccak256(abi.encodePacked(projectId))\\n            );\\n    }\\n\\n    /// @notice Gets the length (number) of strategies of a project listing.\\n    function getProjectStrategiesLengthRaw(bytes32 projectId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return projectStrategies[projectId].length();\\n    }\\n\\n    /// @notice Gets the project's strategy hash at a specific index in the listing.\\n    function getProjectStrategyAt(string calldata projectId, uint256 index)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            getProjectStrategyAtRaw(\\n                keccak256(abi.encodePacked(projectId)),\\n                index\\n            );\\n    }\\n\\n    /// @notice Gets the project's strategy hash at a specific index in the listing.\\n    function getProjectStrategyAtRaw(bytes32 projectId, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return projectStrategies[projectId].at(index);\\n    }\\n\\n    /// @notice Lists the project's strategy hashes within a specific range in the listing.\\n    function getProjectStrategies(\\n        string calldata projectId,\\n        uint256 from,\\n        uint256 amount\\n    ) external view returns (bytes32[] memory) {\\n        return\\n            getProjectStrategiesRaw(\\n                keccak256(abi.encodePacked(projectId)),\\n                from,\\n                amount\\n            );\\n    }\\n\\n    /// @notice Lists the project's strategy hashes within a specific range in the listing.\\n    function getProjectStrategiesRaw(\\n        bytes32 projectId,\\n        uint256 from,\\n        uint256 amount\\n    ) public view returns (bytes32[] memory) {\\n        return getPaginated(projectStrategies[projectId], from, amount);\\n    }\\n\\n    //** strategies **/\\n\\n    /// @notice Gets the length (number) of strategies of a project listing.\\n    function getStrategiesLength() external view returns (uint256) {\\n        return strategies.length();\\n    }\\n\\n    /// @notice Gets the strategy hash at a specific index in the listing.\\n    function getStrategyAt(uint256 index) external view returns (bytes32) {\\n        return strategies.at(index);\\n    }\\n\\n    /// @notice Lists the strategy hashes within a specific range in the listing.\\n    function getStrategies(uint256 from, uint256 amount)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return getPaginated(strategies, from, amount);\\n    }\\n\\n    //** underlying */\\n\\n    /// @notice Gets the length (number) of strategies of a project listing.\\n    function getUnderlyingStrategiesLength(IERC20 token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return underlyingToStrategies[token].length();\\n    }\\n\\n    /// @notice Gets the underlying tokens's strategy hash at a specific index in the listing.\\n    function getUnderlyingStrategyAt(IERC20 token, uint256 index)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return underlyingToStrategies[token].at(index);\\n    }\\n\\n    /// @notice Lists the underlying tokens's strategy hashes within a specific range in the listing.\\n    function getUnderlyingStrategies(\\n        IERC20 token,\\n        uint256 from,\\n        uint256 amount\\n    ) external view returns (bytes32[] memory) {\\n        return getPaginated(underlyingToStrategies[token], from, amount);\\n    }\\n\\n    function getPaginated(\\n        EnumerableSetUpgradeable.Bytes32Set storage set,\\n        uint256 from,\\n        uint256 amount\\n    ) private view returns (bytes32[] memory) {\\n        uint256 length = set.length();\\n        if (from >= length) {\\n            return new bytes32[](0);\\n        }\\n\\n        if (from + amount > length) {\\n            amount = length - from;\\n        }\\n\\n        bytes32[] memory types = new bytes32[](amount);\\n        for (uint256 i = 0; i < amount; i++) {\\n            types[i] == strategyTypes.at(from + i);\\n        }\\n        return types;\\n    }\\n    \\n    function setVaulchef(IVaultChef newVaultChef) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        vaultChef = newVaultChef;\\n    }\\n}\\n\",\"keccak256\":\"0x67839dc042787232843f4193cd2e5f3d57107c4f94c312f7329cc6b51360e769\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/1b27c13096d6e4389d62e7b0766a1db53fbb3f1b/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\npragma solidity ^0.8.6;\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x87eb2ca94004620e51f74478a2827910a30d5ec6b69e64606ddd8c8fc9a93831\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev The VaultChef implements the masterchef interface for compatibility with third-party tools.\\ninterface IMasterChef {\\n    /// @dev An active vault has a dummy allocPoint of 1 while an inactive one has an allocPoint of zero.\\n    /// @dev This is done for better compatibility with third-party tools.\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            IERC20 lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accTokenPerShare\\n        );\\n\\n    function userInfo(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    /// @dev Returns the total number of active vaults.\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\",\"keccak256\":\"0xee4671ef61bd5f079ef5ed17d1c1556c2a7b05ac33b0d94a76377ddc720c4550\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n  /**\\n     * @notice Gets the token this strategy compounds.\\n     * @dev This token might have a transfer-tax.\\n     * @dev Invariant: This variable may never change.\\n     */\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice Gets the total amount of tokens either idle in this strategy or staked in an underlying strategy.\\n     */\\n    function totalUnderlying() external view returns (uint256 totalUnderlying);\\n    /**\\n     * @notice Gets the total amount of tokens either idle in this strategy or staked in an underlying strategy and only the tokens actually staked.\\n     */\\n    function totalUnderlyingAndStaked() external view returns (uint256 totalUnderlying, uint256 totalUnderlyingStaked);\\n\\n    /**\\n     * @notice The panic function unstakes all staked funds from the strategy and leaves them idle in the strategy for withdrawal\\n     * @dev Authority: This function must only be callable by the VaultChef.\\n     */\\n    function panic() external;\\n\\n    /**\\n     * @notice Executes a harvest on the underlying vaultchef.\\n     * @dev Authority: This function must only be callable by the vaultchef.\\n     */\\n    function harvest() external;\\n    /**\\n     * @notice Deposits `amount` amount of underlying tokens in the underlying strategy\\n     * @dev Authority: This function must only be callable by the VaultChef.\\n     */\\n    function deposit(uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws `amount` amount of underlying tokens to `to`.\\n     * @dev Authority: This function must only be callable by the VaultChef.\\n     */\\n    function withdraw(address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws `amount` amount of `token` to `to`.\\n     * @notice This function is used to withdraw non-staking and non-native tokens accidentally sent to the strategy.\\n     * @notice It will also be used to withdraw tokens airdropped to the strategies.\\n     * @notice The underlying token can never be withdrawn through this method because VaultChef prevents it.\\n     * @dev Requirement: This function should in no way allow withdrawal of staking tokens\\n     * @dev Requirement: This function should in no way allow for the decline in shares or share value (this is also checked in the VaultChef);\\n     * @dev Validation is already done in the VaultChef that the staking token cannot be withdrawn.\\n     * @dev Authority: This function must only be callable by the VaultChef.\\n     */\\n    function inCaseTokensGetStuck(\\n        IERC20 token,\\n        uint256 amount,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9408b247e1d3d0378f764e92fc67d2dc7fc1e60b58b60bf5cce0a98141e67ba6\",\"license\":\"MIT\"},\"contracts/interfaces/ISubFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IVaultChef.sol\\\";\\n\\ninterface ISubFactory {\\n    function deployStrategy(\\n        IVaultChef vaultChef,\\n        IERC20 underlyingToken,\\n        bytes calldata projectData,\\n        bytes calldata strategyData\\n    ) external returns (IStrategy);\\n}\\n\",\"keccak256\":\"0xa42619e9a2b4e19cdfc3180d1ec35d63e8f8b8d66839111b141371e4369031fd\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IVaultChefCore.sol\\\";\\nimport \\\"./IVaultChefWrapper.sol\\\";\\n\\n\\n/// @notice Interface for derivative protocols.\\ninterface IVaultChef is IVaultChefWrapper, IVaultChefCore {\\n    function owner() external view returns (address);\\n}\",\"keccak256\":\"0x8cdcee41b584a505950a195902c1d06f08045fc47be1168d315f55b7a973c20d\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultChefCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\n\\n/**\\n * @notice The VaultChef is a vault management contract that manages vaults, their strategies and the share positions of investors in these vaults.\\n * @notice Positions are not hardcoded into the contract like traditional staking contracts, instead they are managed as ERC-1155 receipt tokens.\\n * @notice This receipt-token mechanism is supposed to simplify zapping and other derivative protocols.\\n * @dev The VaultChef contract has the following design principles.\\n * @dev 1. Simplicity of Strategies: Strategies should be as simple as possible.\\n * @dev 2. Control of Governance: Governance should never be able to steal underlying funds.\\n * @dev 3. Auditability: It should be easy for third-party reviewers to assess the safety of the VaultChef.\\n */\\ninterface IVaultChefCore is IERC1155 {\\n    /// @notice A vault is a strategy users can stake underlying tokens in to receive a share of the vault value.\\n    struct Vault {\\n        /// @notice The token this strategy will compound.\\n        IERC20 underlyingToken;\\n        /// @notice The timestamp of the last harvest, set to zero while no harvests have happened.\\n        uint96 lastHarvestTimestamp;\\n        /// @notice The strategy contract.\\n        IStrategy strategy;\\n        /// @notice The performance fee portion of the harvests that is sent to the feeAddress, denominated by 10,000.\\n        uint16 performanceFeeBP;\\n        /// @notice Whether deposits are currently paused.\\n        bool paused;\\n        /// @notice Whether the vault has panicked which means the funds are pulled from the strategy and it is paused forever.\\n        bool panicked;\\n    }\\n\\n    /**\\n     * @notice Deposit `underlyingAmount` amount of underlying tokens into the vault and receive `sharesReceived` proportional to the actually staked amount.\\n     * @notice Deposits mint `sharesReceived` receipt tokens as ERC-1155 tokens to msg.sender with the tokenId equal to the vaultId.\\n     * @notice The tokens are transferred from `msg.sender` which requires approval if pulled is set to false, otherwise `msg.sender` needs to implement IPullDepositor.\\n     * @param vaultId The id of the vault.\\n     * @param underlyingAmount The intended amount of tokens to deposit (this might not equal the actual deposited amount due to tx/stake fees or the pull mechanism).\\n     * @param pulled Uses a pull-based deposit hook if set to true, otherwise traditional safeTransferFrom. The pull-based mechanism allows the depositor to send tokens using a hook.\\n     * @param minSharesReceived The minimum amount of shares that must be received, or the transaction reverts.\\n     * @dev This pull-based methodology is extremely valuable for zapping transfer-tax tokens more economically.\\n     * @dev `msg.sender` must be a smart contract implementing the `IPullDepositor` interface.\\n     * @return sharesReceived The number of shares minted to the msg.sender.\\n     */\\n    function depositUnderlying(\\n        uint256 vaultId,\\n        uint256 underlyingAmount,\\n        bool pulled,\\n        uint256 minSharesReceived\\n    ) external returns (uint256 sharesReceived);\\n\\n    /**\\n     * @notice Withdraws `shares` from the vault into underlying tokens to the `msg.sender`.\\n     * @notice Burns `shares` receipt tokens from the `msg.sender`.\\n     * @param vaultId The id of the vault.\\n     * @param shares The amount of shares to burn, underlying tokens will be sent to msg.sender proportionally.\\n     * @param minUnderlyingReceived The minimum amount of underlying tokens that must be received, or the transaction reverts.\\n     */\\n    function withdrawShares(\\n        uint256 vaultId,\\n        uint256 shares,\\n        uint256 minUnderlyingReceived\\n    ) external returns (uint256 underlyingReceived);\\n\\n    /**\\n     * @notice Withdraws `shares` from the vault into underlying tokens to the `to` address.\\n     * @notice To prevent phishing, we require msg.sender to be a contract as this is intended for more economical zapping of transfer-tax token withdrawals.\\n     * @notice Burns `shares` receipt tokens from the `msg.sender`.\\n     * @param vaultId The id of the vault.\\n     * @param shares The amount of shares to burn, underlying tokens will be sent to msg.sender proportionally.\\n     * @param minUnderlyingReceived The minimum amount of underlying tokens that must be received, or the transaction reverts.\\n     */\\n    function withdrawSharesTo(\\n        uint256 vaultId,\\n        uint256 shares,\\n        uint256 minUnderlyingReceived,\\n        address to\\n    ) external returns (uint256 underlyingReceived);\\n\\n    /**\\n     * @notice Total amount of shares in circulation for a given vaultId.\\n     * @param vaultId The id of the vault.\\n     * @return The total number of shares currently in circulation.\\n     */\\n    function totalSupply(uint256 vaultId) external view returns (uint256);\\n\\n    /**\\n     * @notice Calls harvest on the underlying strategy to compound pending rewards to underlying tokens.\\n     * @notice The performance fee is minted to the owner as shares, it can never be greater than 5% of the underlyingIncrease.\\n     * @return underlyingIncrease The amount of underlying tokens generated.\\n     * @dev Can only be called by owner.\\n     */\\n    function harvest(uint256 vaultId)\\n        external\\n        returns (uint256 underlyingIncrease);\\n\\n    /**\\n     * @notice Adds a new vault to the vaultchef.\\n     * @param strategy The strategy contract that manages the allocation of the funds for this vault, also defines the underlying token\\n     * @param performanceFeeBP The percentage of the harvest rewards that are given to the governance, denominated by 10,000 and maximum 5%.\\n     * @dev Can only be called by owner.\\n     */\\n    function addVault(IStrategy strategy, uint16 performanceFeeBP) external;\\n\\n    /**\\n     * @notice Updates the performanceFee of the vault.\\n     * @param vaultId The id of the vault.\\n     * @param performanceFeeBP The percentage of the harvest rewards that are given to the governance, denominated by 10,000 and maximum 5%.\\n     * @dev Can only be called by owner.\\n     */\\n    function setVault(uint256 vaultId, uint16 performanceFeeBP) external;\\n    /**\\n     * @notice Allows the `pullDepositor` to create pull-based deposits (useful for zapping contract).\\n     * @notice Having a whitelist is not necessary for this functionality as it is safe but upon defensive code recommendations one was added in.\\n     * @dev Can only be called by owner.\\n     */\\n    function setPullDepositor(address pullDepositor, bool isAllowed) external;\\n    \\n    /**\\n     * @notice Withdraws funds from the underlying staking contract to the strategy and irreversibly pauses the vault.\\n     * @param vaultId The id of the vault.\\n     * @dev Can only be called by owner.\\n     */\\n    function panicVault(uint256 vaultId) external;\\n\\n    /**\\n     * @notice Returns true if there is a vault associated with the `vaultId`.\\n     * @param vaultId The id of the vault.\\n     */\\n    function isValidVault(uint256 vaultId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the Vault information of the vault at `vaultId`, returns if non-existent.\\n     * @param vaultId The id of the vault.\\n     */\\n    function vaultInfo(uint256 vaultId) external view returns (IERC20 underlyingToken, uint96 lastHarvestTimestamp, IStrategy strategy, uint16 performanceFeeBP, bool paused, bool panicked);\\n\\n    /**\\n     * @notice Pauses the vault which means deposits and harvests are no longer permitted, reverts if already set to the desired value.\\n     * @param vaultId The id of the vault.\\n     * @param paused True to pause, false to unpause.\\n     * @dev Can only be called by owner.\\n     */\\n    function pauseVault(uint256 vaultId, bool paused) external;\\n\\n    /**\\n     * @notice Transfers tokens from the VaultChef to the `to` address.\\n     * @notice Cannot be abused by governance since the protocol never ever transfers tokens to the VaultChef. Any tokens stored there are accidentally sent there.\\n     * @param token The token to withdraw from the VaultChef.\\n     * @param to The address to send the token to.\\n     * @dev Can only be called by owner.\\n     */\\n    function inCaseTokensGetStuck(IERC20 token, address to) external;\\n\\n    /**\\n     * @notice Transfers tokens from the underlying strategy to the `to` address.\\n     * @notice Cannot be abused by governance since VaultChef prevents token to be equal to the underlying token.\\n     * @param token The token to withdraw from the strategy.\\n     * @param to The address to send the token to.\\n     * @param amount The amount of tokens to withdraw.\\n     * @dev Can only be called by owner.\\n     */\\n    function inCaseVaultTokensGetStuck(\\n        uint256 vaultId,\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa36d44475262052c5181f708133295e97ea151f783fbb240b5b42b8f5718a397\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultChefWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IMasterChef.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\ninterface IVaultChefWrapper is IMasterChef, IERC20Metadata{\\n     /**\\n     * @notice Interface function to fetch the total underlying tokens inside a vault.\\n     * @notice Calls the totalUnderlying function on the vault strategy.\\n     * @param vaultId The id of the vault.\\n     */\\n    function totalUnderlying(uint256 vaultId) external view returns (uint256);\\n\\n     /**\\n     * @notice Changes the ERC-20 metadata for etherscan listing.\\n     * @param newName The new ERC-20-like token name.\\n     * @param newSymbol The new ERC-20-like token symbol.\\n     * @param newDecimals The new ERC-20-like token decimals.\\n     */\\n    function changeMetadata(\\n        string memory newName,\\n        string memory newSymbol,\\n        uint8 newDecimals\\n    ) external;\\n\\n     /**\\n     * @notice Sets the ERC-1155 metadata URI.\\n     * @param newURI The new ERC-1155 metadata URI.\\n     */\\n    function setURI(string memory newURI) external;\\n\\n    /// @notice mapping that returns true if the strategy is set as a vault.\\n    function strategyExists(IStrategy strategy) external view returns(bool);\\n\\n\\n    /// @notice Utility mapping for UI to figure out the vault id of a strategy.\\n    function strategyVaultId(IStrategy strategy) external view returns(uint256);\\n\\n}\\n\",\"keccak256\":\"0x305ef4a7d8724014f2b6c985d5c897f2392f5dccff5782248169f13e88c70968\",\"license\":\"MIT\"},\"contracts/interfaces/IZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IZapHandler.sol\\\";\\n\\n/// @notice The IZap interface allows contracts to swap a token for another token without having to directly interact with verbose AMMs directly.\\n/// @notice It furthermore allows to zap to and from an LP pair within a single transaction.\\ninterface IZap {\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `recipient`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Reverts if the `recipient` received less tokens than `minReceived`.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `recipient`.\\n    * @param recipient The destination address to receive the `toToken`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    * @param minReceived The minimum amount of `toToken` the `recipient` should receive. Otherwise the transaction reverts.\\n    */\\n    function swapERC20(IERC20 fromToken, IERC20 toToken, address recipient, uint256 amount, uint256 minReceived) external returns (uint256 received);\\n\\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `msg.sender`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `msg.sender`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    */\\n    function swapERC20Fast(IERC20 fromToken, IERC20 toToken, uint256 amount) external;\\n\\n    function implementation() external view returns (IZapHandler);\\n}\",\"keccak256\":\"0xe5cb986010d97ee1c2626b6752c1bd01d2c3c584896ffbd720c7a7a1a7b60bfc\",\"license\":\"MIT\"},\"contracts/interfaces/IZapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice The IZap interface allows contracts to swap a token for another token without having to directly interact with verbose AMMs directly.\\n/// @notice It furthermore allows to zap to and from an LP pair within a single transaction.\\ninterface IZapHandler {\\n    struct Factory {\\n        /// @dev The address of the factory.\\n        address factory;\\n        /// @dev The fee nominator of the AMM, usually set to 997 for a 0.3% fee.\\n        uint32 amountsOutNominator;\\n        /// @dev The fee denominator of the AMM, usually set to 1000.\\n        uint32 amountsOutDenominator;\\n    }\\n\\n    function setFactory(\\n        address factory,\\n        uint32 amountsOutNominator,\\n        uint32 amountsOutDenominator\\n    ) external;\\n\\n    function setRoute(\\n        IERC20 from,\\n        IERC20 to,\\n        address[] memory inputRoute\\n    ) external;\\n    function factories(address factoryAddress) external view returns (Factory memory);\\n\\n    function routeLength(IERC20 token0, IERC20 token1) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n}\",\"keccak256\":\"0x1685a262b52676b84856cc9fc2258ee75552f92e1ea99bd6ffdf31f10908b503\",\"license\":\"MIT\"},\"contracts/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IVaultChef.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IZap.sol\\\";\\n\\n/**\\n * @notice The BaseStrategy implements reusable logic for all Violin strategies that earn some single asset \\\"rewardToken\\\".\\n * @dev It exposes a very simple interface which the actual strategies can implement.\\n * @dev The zapper contract does not have excessive privileges and withdrawals should always be possible even if it reverts.\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    /// @dev Set to true once _initializeBase is called by the implementation.\\n    bool initialized;\\n\\n    /// @dev The vaultchef contract this strategy is managed by.\\n    IVaultChef public vaultchef;\\n    /// @dev The zapper contract to swap earned for underlying tokens.\\n    IZap public zap;\\n    /// @dev The token that is actually staked into the underlying protocol.\\n    IERC20 public override underlyingToken;\\n    /// @dev The token the underlying protocol gives as a reward.\\n    IERC20 public rewardToken;\\n\\n    modifier onlyVaultchef() {\\n        require(msg.sender == address(vaultchef), \\\"!vaultchef\\\");\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        require(!initialized, \\\"!already initialized\\\");\\n        _;\\n        // We ensure that the implementation has called _initializeBase during the external initialize function.\\n        require(initialized, \\\"!not initialized\\\");\\n    }\\n\\n    /// @notice Initializes the base strategy variables, should be called together with contract deployment by a contract factory.\\n    function _initializeBase(\\n        IVaultChef _vaultchef,\\n        IZap _zap,\\n        IERC20 _underlyingToken,\\n        IERC20 _rewardToken\\n    ) internal {\\n        assert(!initialized); // No implementation should call _initializeBase without using the initialize modifier, hence we can assert.\\n        initialized = true;\\n        vaultchef = _vaultchef;\\n        zap = _zap;\\n        underlyingToken = _underlyingToken;\\n        rewardToken = _rewardToken;\\n    }\\n\\n    /// @notice Deposits `amount` amount of underlying tokens in the underlying strategy.\\n    /// @dev Authority: This function must only be callable by the VaultChef.\\n    function deposit(uint256 amount) external override onlyVaultchef {\\n        _deposit(amount);\\n    }\\n\\n    /// @notice Withdraws `amount` amount of underlying tokens to `to`.\\n    /// @dev Authority: This function must only be callable by the VaultChef.\\n    function withdraw(address to, uint256 amount)\\n        external\\n        override\\n        onlyVaultchef\\n    {\\n        uint256 idleUnderlying = underlyingToken.balanceOf(address(this));\\n        if (idleUnderlying < amount) {\\n            _withdraw(amount - idleUnderlying);\\n        }\\n        uint256 toWithdraw = underlyingToken.balanceOf(address(this));\\n        if (amount < toWithdraw) {\\n            toWithdraw = amount;\\n        }\\n        underlyingToken.safeTransfer(to, toWithdraw);\\n    }\\n\\n    /// @notice Withdraws all funds from the underlying staking contract into the strategy.\\n    /// @dev This should ideally always work (eg. emergencyWithdraw instead of a normal withdraw on masterchefs).\\n    function panic() external override onlyVaultchef {\\n        _panic();\\n    }\\n\\n    /// @notice Harvests the reward token from the underlying protocol, converts it to underlying tokens and deposits it again.\\n    /// @dev The whole rewardToken balance will be converted to underlying tokens, this might include tokens send to the contract by accident.\\n    /// @dev There is no way to exploit this, even when reward and earned tokens are identical since the vaultchef does not allow harvesting after a panic occurs.\\n    function harvest() external override onlyVaultchef {\\n        _harvest();\\n\\n        if (rewardToken != underlyingToken) {\\n            uint256 rewardBalance = rewardToken.balanceOf(address(this));\\n            if (rewardBalance > 0) {\\n                rewardToken.approve(address(zap), rewardBalance);\\n                zap.swapERC20Fast(rewardToken, underlyingToken, rewardBalance);\\n            }\\n        }\\n        uint256 toDeposit = underlyingToken.balanceOf(address(this));\\n        if (toDeposit > 0) {\\n            _deposit(toDeposit);\\n        }\\n    }\\n\\n    /// @notice Withdraws stuck ERC-20 tokens inside the strategy contract, cannot be staking or underlying.\\n    function inCaseTokensGetStuck(\\n        IERC20 token,\\n        uint256 amount,\\n        address to\\n    ) external override onlyVaultchef {\\n        require(\\n            token != underlyingToken && token != rewardToken,\\n            \\\"invalid token\\\"\\n        );\\n        require(!isTokenProhibited(token), \\\"token prohibited\\\");\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    function isTokenProhibited(IERC20) internal virtual returns(bool) {\\n        return false;\\n    }\\n\\n    /// @notice Gets the total amount of tokens either idle in this strategy or staked in an underlying strategy.\\n    function totalUnderlying() external view override returns (uint256) {\\n        return underlyingToken.balanceOf(address(this)) + _totalStaked();\\n    }\\n\\n    /// @notice Gets the total amount of tokens either idle in this strategy or staked in an underlying strategy and only the tokens actually staked.\\n    function totalUnderlyingAndStaked()\\n        external\\n        view\\n        override\\n        returns (uint256 _totalUnderlying, uint256 _totalUnderlyingStaked)\\n    {\\n        uint256 totalStaked = _totalStaked();\\n        return (\\n            underlyingToken.balanceOf(address(this)) + totalStaked,\\n            totalStaked\\n        );\\n    }\\n\\n    ///** INTERFACE FOR IMPLEMENTATIONS **/\\n\\n    /// @notice Should withdraw all staked funds to the strategy.\\n    function _panic() internal virtual;\\n\\n    /// @notice Should harvest all earned rewardTokens to the strategy.\\n    function _harvest() internal virtual;\\n\\n    /// @notice Should deposit `amount` from the strategy into the staking contract.\\n    function _deposit(uint256 amount) internal virtual;\\n\\n    /// @notice Should withdraw `amount` from the staking contract, it is okay if there is a transfer tax and less is actually received.\\n    function _withdraw(uint256 amount) internal virtual;\\n\\n    /// @notice Should withdraw `amount` from the staking contract, it is okay if there is a transfer tax and less is actually received.\\n    function _totalStaked() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x58a66d131f37f99e6e0640f54b01573881a311867c8df0ef16b560c56cc2d624\",\"license\":\"MIT\"},\"contracts/strategies/StrategyCryptoRaiders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@violinio/defi-interfaces/contracts/ICryptoRaidersStaking.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\n\\ncontract StrategyCryptoRaiders is BaseStrategy {\\n    ICryptoRaidersStaking public staking;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    function initialize(\\n        IVaultChef _vaultchef,\\n        IZap _zap,\\n        IERC20 _underlyingToken,\\n        IERC20 _rewardToken,\\n        ICryptoRaidersStaking _staking\\n    ) external initializer {\\n        require(msg.sender == deployer);\\n        _initializeBase(_vaultchef, _zap, _underlyingToken, _rewardToken);\\n\\n        staking = _staking;\\n    }\\n\\n    function _panic() internal override {\\n        staking.emergencyUnstake(_totalStaked());\\n    }\\n\\n    function _harvest() internal override {\\n        staking.getRewards();\\n    }\\n\\n    function _deposit(uint256 amount) internal override {\\n        underlyingToken.approve(address(staking), amount);\\n        staking.createStake(amount);\\n    }\\n\\n    function _withdraw(uint256 amount) internal override {\\n        staking.removeStake(amount);\\n    }\\n\\n    function _totalStaked() internal view override returns (uint256) {\\n        return staking.addressStakedBalance(address(this));\\n    }\\n\\n    // Violin vaults on more complex protocols have a fallback function that allows executing arbitrary logic to react to issues. This logic can only be executed after 60 days of no deposits or harvests.\\n    function emergency(address addr) external {\\n        require(\\n            msg.sender == vaultchef.owner(),\\n            \\\"must be called by vaultchef governance\\\"\\n        );\\n        uint256 vaultId = vaultchef.strategyVaultId(IStrategy(address(this)));\\n        (, uint96 lastHarvestTimestamp, , , , ) = vaultchef\\n            .vaultInfo(vaultId);\\n        require(\\n            block.timestamp > lastHarvestTimestamp + 60 days,\\n            \\\"vault must not have had deposits for two months\\\"\\n        );\\n        (bool res,) = addr.delegatecall(\\\"\\\");\\n        require(res, \\\"failed\\\");\\n    }\\n}\",\"keccak256\":\"0x03811edaff2eaad08849b17bbde58456602e3d128773962c851bded15ce89a50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611c23380380611c2383398101604081905261002f91610066565b60609190911b6001600160601b031916608052600080546001600160a01b0319166001600160a01b039092169190911790556100b8565b6000806040838503121561007957600080fd5b8251610084816100a0565b6020840151909250610095816100a0565b809150509250929050565b6001600160a01b03811681146100b557600080fd5b50565b60805160601c611b486100db60003960008181608d015260bc0152611b486000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063262d6152146100465780633555d270146100755780639ef3571014610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61005961008336600461053c565b6100af565b6100597f000000000000000000000000000000000000000000000000000000000000000081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100e657600080fd5b60006100f48587018761051f565b905060006101048486018661051f565b90506101118189846101cb565b600060405161011f906104a5565b604051809103906000f08015801561013b573d6000803e3d6000fd5b50600054604051630a2ca2bd60e11b81526001600160a01b038d8116600483015291821660248201528b8216604482015285821660648201528482166084820152919250821690631459457a9060a401600060405180830381600087803b1580156101a557600080fd5b505af11580156101b9573d6000803e3d6000fd5b50929c9b505050505050505050505050565b826001600160a01b031663cb3992be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561020457600080fd5b505afa925050508015610234575060408051601f3d908101601f19168201909252610231918101906104fb565b60015b6102785760405162461bcd60e51b815260206004820152601060248201526f10b737903932bbb0b93239aa37b5b2b760811b60448201526064015b60405180910390fd5b806001600160a01b0316826001600160a01b0316146102d95760405162461bcd60e51b815260206004820152601760248201527f21696e636f72726563742072657761726473546f6b656e000000000000000000604482015260640161026f565b50826001600160a01b03166333a00bb86040518163ffffffff1660e01b815260040160206040518083038186803b15801561031357600080fd5b505afa925050508015610343575060408051601f3d908101601f19168201909252610340918101906104fb565b60015b6103825760405162461bcd60e51b815260206004820152601060248201526f10b7379039ba30b5b4b733aa37b5b2b760811b604482015260640161026f565b806001600160a01b0316836001600160a01b0316146103e35760405162461bcd60e51b815260206004820152601760248201527f21696e636f7272656374207374616b696e67546f6b656e000000000000000000604482015260640161026f565b50604051630d774cdd60e41b81523060048201526001600160a01b0384169063d774cdd09060240160206040518083038186803b15801561042357600080fd5b505afa925050508015610453575060408051601f3d908101601f19168201909252610450918101906105d1565b60015b61049f5760405162461bcd60e51b815260206004820152601b60248201527f21696e636f72726563742062616c616e63652066756e6374696f6e0000000000604482015260640161026f565b50505050565b6115108061060383390190565b60008083601f8401126104c457600080fd5b50813567ffffffffffffffff8111156104dc57600080fd5b6020830191508360208285010111156104f457600080fd5b9250929050565b60006020828403121561050d57600080fd5b8151610518816105ea565b9392505050565b60006020828403121561053157600080fd5b8135610518816105ea565b6000806000806000806080878903121561055557600080fd5b8635610560816105ea565b95506020870135610570816105ea565b9450604087013567ffffffffffffffff8082111561058d57600080fd5b6105998a838b016104b2565b909650945060608901359150808211156105b257600080fd5b506105bf89828a016104b2565b979a9699509497509295939492505050565b6000602082840312156105e357600080fd5b5051919050565b6001600160a01b03811681146105ff57600080fd5b5056fe608060405234801561001057600080fd5b50600580546001600160a01b031916331790556114de806100326000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80634cf088d91161008c578063c70920bc11610066578063c70920bc146101c0578063e1dfb5c0146101d6578063f3fef3a3146101ee578063f7c618c11461020157600080fd5b80634cf088d91461018757806367206d401461019a578063b6b55f25146101ad57600080fd5b8063432b05cc116100c8578063432b05cc1461014757806345941ee0146101645780634641257d146101775780634700d3051461017f57600080fd5b80631459457a146100ef5780632495a59914610104578063262d615214610134575b600080fd5b6101026100fd3660046112cb565b610214565b005b600254610117906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600154610117906001600160a01b031681565b61014f6102ed565b6040805192835260208301919091520161012b565b610102610172366004611176565b61038c565b610102610698565b6101026108fa565b600454610117906001600160a01b031681565b6101026101a83660046111f7565b610933565b6101026101bb36600461133c565b6109e3565b6101c8610a1b565b60405190815260200161012b565b6000546101179061010090046001600160a01b031681565b6101026101fc3660046111b0565b610aaf565b600354610117906001600160a01b031681565b60005460ff16156102635760405162461bcd60e51b815260206004820152601460248201527308585b1c9958591e481a5b9a5d1a585b1a5e995960621b60448201526064015b60405180910390fd5b6005546001600160a01b0316331461027a57600080fd5b61028685858585610c16565b600480546001600160a01b0319166001600160a01b03831617905560005460ff166102e65760405162461bcd60e51b815260206004820152601060248201526f085b9bdd081a5b9a5d1a585b1a5e995960821b604482015260640161025a565b5050505050565b60008060006102fa610c85565b6002546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561034257600080fd5b505afa158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037a9190611355565b61038491906113e1565b939092509050565b600060019054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103da57600080fd5b505afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104129190611193565b6001600160a01b0316336001600160a01b0316146104815760405162461bcd60e51b815260206004820152602660248201527f6d7573742062652063616c6c6564206279207661756c746368656620676f7665604482015265726e616e636560d01b606482015260840161025a565b60008054604051637ae3780d60e01b81523060048201526101009091046001600160a01b031690637ae3780d9060240160206040518083038186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105019190611355565b600080546040516312520c1b60e31b81526004810184905292935090916101009091046001600160a01b03169063929060d89060240160c06040518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105879190611239565b5050505091505080624f1a0061059d91906113f9565b6001600160601b0316421161060c5760405162461bcd60e51b815260206004820152602f60248201527f7661756c74206d757374206e6f74206861766520686164206465706f7369747360448201526e20666f722074776f206d6f6e74687360881b606482015260840161025a565b6040516000906001600160a01b0385169082818181855af49150503d8060008114610653576040519150601f19603f3d011682016040523d82523d6000602084013e610658565b606091505b50509050806106925760405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b604482015260640161025a565b50505050565b60005461010090046001600160a01b031633146106c75760405162461bcd60e51b815260040161025a906113bd565b6106cf610d06565b6002546003546001600160a01b0390811691161461086a576003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190611355565b905080156108685760035460015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f391906111dc565b50600154600354600254604051630ea0c74360e21b81526001600160a01b039283166004820152908216602482015260448101849052911690633a831d0c90606401600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b505050505b505b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190611355565b905080156108f7576108f781610d5d565b50565b60005461010090046001600160a01b031633146109295760405162461bcd60e51b815260040161025a906113bd565b610931610e43565b565b60005461010090046001600160a01b031633146109625760405162461bcd60e51b815260040161025a906113bd565b6002546001600160a01b0384811691161480159061098e57506003546001600160a01b03848116911614155b6109ca5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b2103a37b5b2b760991b604482015260640161025a565b6109de6001600160a01b0384168284610e94565b505050565b60005461010090046001600160a01b03163314610a125760405162461bcd60e51b815260040161025a906113bd565b6108f781610d5d565b6000610a25610c85565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190611355565b610aaa91906113e1565b905090565b60005461010090046001600160a01b03163314610ade5760405162461bcd60e51b815260040161025a906113bd565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610b2257600080fd5b505afa158015610b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5a9190611355565b905081811015610b7657610b76610b718284611424565b610ee6565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610bba57600080fd5b505afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611355565b905080831015610bff5750815b600254610692906001600160a01b03168583610e94565b60005460ff1615610c2957610c29611467565b600080546001600160a01b03958616610100026001600160a81b031990911617600190811790915580549385166001600160a01b0319948516179055600280549285169284169290921790915560038054919093169116179055565b60048054604051630d774cdd60e41b815230928101929092526000916001600160a01b039091169063d774cdd09060240160206040518083038186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa9190611355565b600480546040805163015cac3360e21b815290516001600160a01b0390921692630572b0cc92828201926000929082900301818387803b158015610d4957600080fd5b505af1158015610692573d6000803e3d6000fd5b6002546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018490529091169063095ea7b390604401602060405180830381600087803b158015610db157600080fd5b505af1158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de991906111dc565b5060048054604051630dfb6ed760e11b81529182018390526001600160a01b031690631bf6ddae906024015b600060405180830381600087803b158015610e2f57600080fd5b505af11580156102e6573d6000803e3d6000fd5b6004546001600160a01b031663012ce501610e5c610c85565b6040518263ffffffff1660e01b8152600401610e7a91815260200190565b600060405180830381600087803b158015610d4957600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109de908490610f15565b6004805460405163939624ab60e01b81529182018390526001600160a01b03169063939624ab90602401610e15565b6000610f6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fe79092919063ffffffff16565b8051909150156109de5780806020019051810190610f8891906111dc565b6109de5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161025a565b6060610ff68484600085611000565b90505b9392505050565b6060824710156110615760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161025a565b843b6110af5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161025a565b600080866001600160a01b031685876040516110cb919061136e565b60006040518083038185875af1925050503d8060008114611108576040519150601f19603f3d011682016040523d82523d6000602084013e61110d565b606091505b509150915061111d828286611128565b979650505050505050565b60608315611137575081610ff9565b8251156111475782518084602001fd5b8160405162461bcd60e51b815260040161025a919061138a565b8051801515811461117157600080fd5b919050565b60006020828403121561118857600080fd5b8135610ff981611493565b6000602082840312156111a557600080fd5b8151610ff981611493565b600080604083850312156111c357600080fd5b82356111ce81611493565b946020939093013593505050565b6000602082840312156111ee57600080fd5b610ff982611161565b60008060006060848603121561120c57600080fd5b833561121781611493565b925060208401359150604084013561122e81611493565b809150509250925092565b60008060008060008060c0878903121561125257600080fd5b865161125d81611493565b60208801519096506001600160601b038116811461127a57600080fd5b604088015190955061128b81611493565b606088015190945061ffff811681146112a357600080fd5b92506112b160808801611161565b91506112bf60a08801611161565b90509295509295509295565b600080600080600060a086880312156112e357600080fd5b85356112ee81611493565b945060208601356112fe81611493565b9350604086013561130e81611493565b9250606086013561131e81611493565b9150608086013561132e81611493565b809150509295509295909350565b60006020828403121561134e57600080fd5b5035919050565b60006020828403121561136757600080fd5b5051919050565b6000825161138081846020870161143b565b9190910192915050565b60208152600082518060208401526113a981604085016020870161143b565b601f01601f19169190910160400192915050565b6020808252600a908201526910bb30bab63a31b432b360b11b604082015260600190565b600082198211156113f4576113f461147d565b500190565b60006001600160601b0380831681851680830382111561141b5761141b61147d565b01949350505050565b6000828210156114365761143661147d565b500390565b60005b8381101561145657818101518382015260200161143e565b838111156106925750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146108f757600080fdfea2646970667358221220b615e6f81857d6bce6850133e2a7f6a207021ddc22d50883d1672b2e75794fc264736f6c63430008060033a2646970667358221220ffc539b91f8b8b77fa20801e140bfb0a16dece515b3476cdf46b329609ffd6db64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063262d6152146100465780633555d270146100755780639ef3571014610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61005961008336600461053c565b6100af565b6100597f000000000000000000000000000000000000000000000000000000000000000081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100e657600080fd5b60006100f48587018761051f565b905060006101048486018661051f565b90506101118189846101cb565b600060405161011f906104a5565b604051809103906000f08015801561013b573d6000803e3d6000fd5b50600054604051630a2ca2bd60e11b81526001600160a01b038d8116600483015291821660248201528b8216604482015285821660648201528482166084820152919250821690631459457a9060a401600060405180830381600087803b1580156101a557600080fd5b505af11580156101b9573d6000803e3d6000fd5b50929c9b505050505050505050505050565b826001600160a01b031663cb3992be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561020457600080fd5b505afa925050508015610234575060408051601f3d908101601f19168201909252610231918101906104fb565b60015b6102785760405162461bcd60e51b815260206004820152601060248201526f10b737903932bbb0b93239aa37b5b2b760811b60448201526064015b60405180910390fd5b806001600160a01b0316826001600160a01b0316146102d95760405162461bcd60e51b815260206004820152601760248201527f21696e636f72726563742072657761726473546f6b656e000000000000000000604482015260640161026f565b50826001600160a01b03166333a00bb86040518163ffffffff1660e01b815260040160206040518083038186803b15801561031357600080fd5b505afa925050508015610343575060408051601f3d908101601f19168201909252610340918101906104fb565b60015b6103825760405162461bcd60e51b815260206004820152601060248201526f10b7379039ba30b5b4b733aa37b5b2b760811b604482015260640161026f565b806001600160a01b0316836001600160a01b0316146103e35760405162461bcd60e51b815260206004820152601760248201527f21696e636f7272656374207374616b696e67546f6b656e000000000000000000604482015260640161026f565b50604051630d774cdd60e41b81523060048201526001600160a01b0384169063d774cdd09060240160206040518083038186803b15801561042357600080fd5b505afa925050508015610453575060408051601f3d908101601f19168201909252610450918101906105d1565b60015b61049f5760405162461bcd60e51b815260206004820152601b60248201527f21696e636f72726563742062616c616e63652066756e6374696f6e0000000000604482015260640161026f565b50505050565b6115108061060383390190565b60008083601f8401126104c457600080fd5b50813567ffffffffffffffff8111156104dc57600080fd5b6020830191508360208285010111156104f457600080fd5b9250929050565b60006020828403121561050d57600080fd5b8151610518816105ea565b9392505050565b60006020828403121561053157600080fd5b8135610518816105ea565b6000806000806000806080878903121561055557600080fd5b8635610560816105ea565b95506020870135610570816105ea565b9450604087013567ffffffffffffffff8082111561058d57600080fd5b6105998a838b016104b2565b909650945060608901359150808211156105b257600080fd5b506105bf89828a016104b2565b979a9699509497509295939492505050565b6000602082840312156105e357600080fd5b5051919050565b6001600160a01b03811681146105ff57600080fd5b5056fe608060405234801561001057600080fd5b50600580546001600160a01b031916331790556114de806100326000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80634cf088d91161008c578063c70920bc11610066578063c70920bc146101c0578063e1dfb5c0146101d6578063f3fef3a3146101ee578063f7c618c11461020157600080fd5b80634cf088d91461018757806367206d401461019a578063b6b55f25146101ad57600080fd5b8063432b05cc116100c8578063432b05cc1461014757806345941ee0146101645780634641257d146101775780634700d3051461017f57600080fd5b80631459457a146100ef5780632495a59914610104578063262d615214610134575b600080fd5b6101026100fd3660046112cb565b610214565b005b600254610117906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600154610117906001600160a01b031681565b61014f6102ed565b6040805192835260208301919091520161012b565b610102610172366004611176565b61038c565b610102610698565b6101026108fa565b600454610117906001600160a01b031681565b6101026101a83660046111f7565b610933565b6101026101bb36600461133c565b6109e3565b6101c8610a1b565b60405190815260200161012b565b6000546101179061010090046001600160a01b031681565b6101026101fc3660046111b0565b610aaf565b600354610117906001600160a01b031681565b60005460ff16156102635760405162461bcd60e51b815260206004820152601460248201527308585b1c9958591e481a5b9a5d1a585b1a5e995960621b60448201526064015b60405180910390fd5b6005546001600160a01b0316331461027a57600080fd5b61028685858585610c16565b600480546001600160a01b0319166001600160a01b03831617905560005460ff166102e65760405162461bcd60e51b815260206004820152601060248201526f085b9bdd081a5b9a5d1a585b1a5e995960821b604482015260640161025a565b5050505050565b60008060006102fa610c85565b6002546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561034257600080fd5b505afa158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037a9190611355565b61038491906113e1565b939092509050565b600060019054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103da57600080fd5b505afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104129190611193565b6001600160a01b0316336001600160a01b0316146104815760405162461bcd60e51b815260206004820152602660248201527f6d7573742062652063616c6c6564206279207661756c746368656620676f7665604482015265726e616e636560d01b606482015260840161025a565b60008054604051637ae3780d60e01b81523060048201526101009091046001600160a01b031690637ae3780d9060240160206040518083038186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105019190611355565b600080546040516312520c1b60e31b81526004810184905292935090916101009091046001600160a01b03169063929060d89060240160c06040518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105879190611239565b5050505091505080624f1a0061059d91906113f9565b6001600160601b0316421161060c5760405162461bcd60e51b815260206004820152602f60248201527f7661756c74206d757374206e6f74206861766520686164206465706f7369747360448201526e20666f722074776f206d6f6e74687360881b606482015260840161025a565b6040516000906001600160a01b0385169082818181855af49150503d8060008114610653576040519150601f19603f3d011682016040523d82523d6000602084013e610658565b606091505b50509050806106925760405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b604482015260640161025a565b50505050565b60005461010090046001600160a01b031633146106c75760405162461bcd60e51b815260040161025a906113bd565b6106cf610d06565b6002546003546001600160a01b0390811691161461086a576003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190611355565b905080156108685760035460015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f391906111dc565b50600154600354600254604051630ea0c74360e21b81526001600160a01b039283166004820152908216602482015260448101849052911690633a831d0c90606401600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b505050505b505b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190611355565b905080156108f7576108f781610d5d565b50565b60005461010090046001600160a01b031633146109295760405162461bcd60e51b815260040161025a906113bd565b610931610e43565b565b60005461010090046001600160a01b031633146109625760405162461bcd60e51b815260040161025a906113bd565b6002546001600160a01b0384811691161480159061098e57506003546001600160a01b03848116911614155b6109ca5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b2103a37b5b2b760991b604482015260640161025a565b6109de6001600160a01b0384168284610e94565b505050565b60005461010090046001600160a01b03163314610a125760405162461bcd60e51b815260040161025a906113bd565b6108f781610d5d565b6000610a25610c85565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190611355565b610aaa91906113e1565b905090565b60005461010090046001600160a01b03163314610ade5760405162461bcd60e51b815260040161025a906113bd565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610b2257600080fd5b505afa158015610b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5a9190611355565b905081811015610b7657610b76610b718284611424565b610ee6565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610bba57600080fd5b505afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611355565b905080831015610bff5750815b600254610692906001600160a01b03168583610e94565b60005460ff1615610c2957610c29611467565b600080546001600160a01b03958616610100026001600160a81b031990911617600190811790915580549385166001600160a01b0319948516179055600280549285169284169290921790915560038054919093169116179055565b60048054604051630d774cdd60e41b815230928101929092526000916001600160a01b039091169063d774cdd09060240160206040518083038186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa9190611355565b600480546040805163015cac3360e21b815290516001600160a01b0390921692630572b0cc92828201926000929082900301818387803b158015610d4957600080fd5b505af1158015610692573d6000803e3d6000fd5b6002546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018490529091169063095ea7b390604401602060405180830381600087803b158015610db157600080fd5b505af1158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de991906111dc565b5060048054604051630dfb6ed760e11b81529182018390526001600160a01b031690631bf6ddae906024015b600060405180830381600087803b158015610e2f57600080fd5b505af11580156102e6573d6000803e3d6000fd5b6004546001600160a01b031663012ce501610e5c610c85565b6040518263ffffffff1660e01b8152600401610e7a91815260200190565b600060405180830381600087803b158015610d4957600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109de908490610f15565b6004805460405163939624ab60e01b81529182018390526001600160a01b03169063939624ab90602401610e15565b6000610f6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fe79092919063ffffffff16565b8051909150156109de5780806020019051810190610f8891906111dc565b6109de5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161025a565b6060610ff68484600085611000565b90505b9392505050565b6060824710156110615760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161025a565b843b6110af5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161025a565b600080866001600160a01b031685876040516110cb919061136e565b60006040518083038185875af1925050503d8060008114611108576040519150601f19603f3d011682016040523d82523d6000602084013e61110d565b606091505b509150915061111d828286611128565b979650505050505050565b60608315611137575081610ff9565b8251156111475782518084602001fd5b8160405162461bcd60e51b815260040161025a919061138a565b8051801515811461117157600080fd5b919050565b60006020828403121561118857600080fd5b8135610ff981611493565b6000602082840312156111a557600080fd5b8151610ff981611493565b600080604083850312156111c357600080fd5b82356111ce81611493565b946020939093013593505050565b6000602082840312156111ee57600080fd5b610ff982611161565b60008060006060848603121561120c57600080fd5b833561121781611493565b925060208401359150604084013561122e81611493565b809150509250925092565b60008060008060008060c0878903121561125257600080fd5b865161125d81611493565b60208801519096506001600160601b038116811461127a57600080fd5b604088015190955061128b81611493565b606088015190945061ffff811681146112a357600080fd5b92506112b160808801611161565b91506112bf60a08801611161565b90509295509295509295565b600080600080600060a086880312156112e357600080fd5b85356112ee81611493565b945060208601356112fe81611493565b9350604086013561130e81611493565b9250606086013561131e81611493565b9150608086013561132e81611493565b809150509295509295909350565b60006020828403121561134e57600080fd5b5035919050565b60006020828403121561136757600080fd5b5051919050565b6000825161138081846020870161143b565b9190910192915050565b60208152600082518060208401526113a981604085016020870161143b565b601f01601f19169190910160400192915050565b6020808252600a908201526910bb30bab63a31b432b360b11b604082015260600190565b600082198211156113f4576113f461147d565b500190565b60006001600160601b0380831681851680830382111561141b5761141b61147d565b01949350505050565b6000828210156114365761143661147d565b500390565b60005b8381101561145657818101518382015260200161143e565b838111156106925750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146108f757600080fdfea2646970667358221220b615e6f81857d6bce6850133e2a7f6a207021ddc22d50883d1672b2e75794fc264736f6c63430008060033a2646970667358221220ffc539b91f8b8b77fa20801e140bfb0a16dece515b3476cdf46b329609ffd6db64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Project data: (address masterchef, address rewardToken) Strategy data: (uint256 pid)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3998,
        "contract": "contracts/factories/CryptoRaidersFactory.sol:CryptoRaidersFactory",
        "label": "zap",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IZap)7755"
      }
    ],
    "types": {
      "t_contract(IZap)7755": {
        "encoding": "inplace",
        "label": "contract IZap",
        "numberOfBytes": "20"
      }
    }
  }
}