{
  "address": "0xFde3df42E6Ada57Dae27C7CDEF21a16301795Dd9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "strategyType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isUpdate",
          "type": "bool"
        }
      ],
      "name": "ProjectRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "strategyType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract ISubFactory",
          "name": "subfactory",
          "type": "address"
        }
      ],
      "name": "StrategyTypeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "strategyId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUpdate",
          "type": "bool"
        }
      ],
      "name": "VaultRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATE_VAULT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER_PROJECT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER_STRATEGY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "strategyId",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        },
        {
          "internalType": "uint16",
          "name": "performanceFee",
          "type": "uint16"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "strategyId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        },
        {
          "internalType": "uint16",
          "name": "performanceFee",
          "type": "uint16"
        }
      ],
      "name": "createVaultRaw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getProjectAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getProjectStrategies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        }
      ],
      "name": "getProjectStrategiesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "getProjectStrategiesLengthRaw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getProjectStrategiesRaw",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getProjectStrategyAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getProjectStrategyAtRaw",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getProjects",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getStrategies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategiesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStrategyAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStrategyTypeAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyTypeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getStrategyTypes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyingStrategies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUnderlyingStrategiesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyingStrategyAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultChef",
          "name": "_vaultChef",
          "type": "address"
        },
        {
          "internalType": "contract IZap",
          "name": "_zap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        }
      ],
      "name": "isProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "isProjectRaw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "strategyType",
          "type": "string"
        }
      ],
      "name": "isStrategyType",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "strategyType",
          "type": "bytes32"
        }
      ],
      "name": "isStrategyTypeRaw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSubfactory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "projectMetadata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "projectParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "projectStrategyType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "strategyType",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "registerProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "strategyType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "registerProjectRaw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "strategyType",
          "type": "string"
        },
        {
          "internalType": "contract ISubFactory",
          "name": "subfactory",
          "type": "address"
        }
      ],
      "name": "registerStrategyType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "strategyType",
          "type": "bytes32"
        },
        {
          "internalType": "contract ISubFactory",
          "name": "subfactory",
          "type": "address"
        }
      ],
      "name": "registerStrategyTypeRaw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "route",
          "type": "address[]"
        }
      ],
      "name": "setRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultChef",
          "name": "newVaultChef",
          "type": "address"
        }
      ],
      "name": "setVaulchef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "strategyMetadata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "subfactoryByType",
      "outputs": [
        {
          "internalType": "contract ISubFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultChef",
      "outputs": [
        {
          "internalType": "contract IVaultChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultIdToStrategy",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zap",
      "outputs": [
        {
          "internalType": "contract IZap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3c488a06672914bda74ed4f80f98f7109132479ad73fc595f08dd1a2aed1368",
  "receipt": {
    "to": "0xdbfD940f57E63049039404c1b35b9e47e90F2B3e",
    "from": "0xa66745F0092F7460F107E4c66C224553bF4Cd727",
    "contractAddress": null,
    "transactionIndex": 30,
    "gasUsed": "2388354",
    "logsBloom": "0x
    "blockHash": "0x2b1a756b79a5de18e2e40359d8ead7892a144a35a000f0da4bb152b5507e17cc",
    "transactionHash": "0xd3c488a06672914bda74ed4f80f98f7109132479ad73fc595f08dd1a2aed1368",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 23572033,
        "transactionHash": "0xd3c488a06672914bda74ed4f80f98f7109132479ad73fc595f08dd1a2aed1368",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000233f2d075af703e00000000000000000000000000000000000000000000000198f5a2cc3ecee80c00000000000000000000000000000000000000000000598a11bd214a945b15b900000000000000000000000000000000000000000000000196c1affbc91f77ce00000000000000000000000000000000000000000000598a13f1141b0a0a85f7",
        "logIndex": 121,
        "blockHash": "0x2b1a756b79a5de18e2e40359d8ead7892a144a35a000f0da4bb152b5507e17cc"
      }
    ],
    "blockNumber": 23572033,
    "cumulativeGasUsed": "7313451",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3117c980e5d7f6baf2e8a44c0bf49ea4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"strategyType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isUpdate\",\"type\":\"bool\"}],\"name\":\"ProjectRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"strategyType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract ISubFactory\",\"name\":\"subfactory\",\"type\":\"address\"}],\"name\":\"StrategyTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"strategyId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUpdate\",\"type\":\"bool\"}],\"name\":\"VaultRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATE_VAULT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER_PROJECT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER_STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"strategyId\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"performanceFee\",\"type\":\"uint16\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strategyId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"performanceFee\",\"type\":\"uint16\"}],\"name\":\"createVaultRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProjectAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProjectStrategies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"}],\"name\":\"getProjectStrategiesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"getProjectStrategiesLengthRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProjectStrategiesRaw\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProjectStrategyAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProjectStrategyAtRaw\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProjects\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getStrategies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategiesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStrategyAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStrategyTypeAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyTypeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getStrategyTypes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingStrategies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUnderlyingStrategiesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingStrategyAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultChef\",\"name\":\"_vaultChef\",\"type\":\"address\"},{\"internalType\":\"contract IZap\",\"name\":\"_zap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"}],\"name\":\"isProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"isProjectRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"strategyType\",\"type\":\"string\"}],\"name\":\"isStrategyType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"strategyType\",\"type\":\"bytes32\"}],\"name\":\"isStrategyTypeRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSubfactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projectMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projectParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projectStrategyType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"strategyType\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"registerProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"strategyType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"registerProjectRaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"strategyType\",\"type\":\"string\"},{\"internalType\":\"contract ISubFactory\",\"name\":\"subfactory\",\"type\":\"address\"}],\"name\":\"registerStrategyType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"strategyType\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISubFactory\",\"name\":\"subfactory\",\"type\":\"address\"}],\"name\":\"registerStrategyTypeRaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultChef\",\"name\":\"newVaultChef\",\"type\":\"address\"}],\"name\":\"setVaulchef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"strategyMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"subfactoryByType\",\"outputs\":[{\"internalType\":\"contract ISubFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultChef\",\"outputs\":[{\"internalType\":\"contract IVaultChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultIdToStrategy\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"contract IZap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"strategies\":{\"details\":\"These are identified as keccak256(abi.encodePacked(keccak256(projectId), keccak256(strategyId))).\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getProjectAt(uint256)\":{\"notice\":\"Gets the project hash at a specific index in the listing.\"},\"getProjectStrategies(string,uint256,uint256)\":{\"notice\":\"Lists the project's strategy hashes within a specific range in the listing.\"},\"getProjectStrategiesLength(string)\":{\"notice\":\"Gets the length (number) of strategies of a project listing.\"},\"getProjectStrategiesLengthRaw(bytes32)\":{\"notice\":\"Gets the length (number) of strategies of a project listing.\"},\"getProjectStrategiesRaw(bytes32,uint256,uint256)\":{\"notice\":\"Lists the project's strategy hashes within a specific range in the listing.\"},\"getProjectStrategyAt(string,uint256)\":{\"notice\":\"Gets the project's strategy hash at a specific index in the listing.\"},\"getProjectStrategyAtRaw(bytes32,uint256)\":{\"notice\":\"Gets the project's strategy hash at a specific index in the listing.\"},\"getProjects(uint256,uint256)\":{\"notice\":\"Lists the project hashes within a specific range in the listing.\"},\"getProjectsLength()\":{\"notice\":\"Gets the length of the projects listing.\"},\"getStrategies(uint256,uint256)\":{\"notice\":\"Lists the strategy hashes within a specific range in the listing.\"},\"getStrategiesLength()\":{\"notice\":\"Gets the length (number) of strategies of a project listing.\"},\"getStrategyAt(uint256)\":{\"notice\":\"Gets the strategy hash at a specific index in the listing.\"},\"getStrategyTypeAt(uint256)\":{\"notice\":\"Gets the strategyType hash at a specific index in the listing.\"},\"getStrategyTypeLength()\":{\"notice\":\"Gets the length of the strategyType listing.\"},\"getStrategyTypes(uint256,uint256)\":{\"notice\":\"Lists the strategyType hashes within a specific range in the listing.\"},\"getUnderlyingStrategies(address,uint256,uint256)\":{\"notice\":\"Lists the underlying tokens's strategy hashes within a specific range in the listing.\"},\"getUnderlyingStrategiesLength(address)\":{\"notice\":\"Gets the length (number) of strategies of a project listing.\"},\"getUnderlyingStrategyAt(address,uint256)\":{\"notice\":\"Gets the underlying tokens's strategy hash at a specific index in the listing.\"},\"isProject(string)\":{\"notice\":\"Returns whether the unhashed `projectId` is registered.\"},\"isProjectRaw(bytes32)\":{\"notice\":\"Returns whether the hashed `projectId` is registered.\"},\"isStrategyType(string)\":{\"notice\":\"Returns whether the unhashed `strategyType` is registered.\"},\"isStrategyTypeRaw(bytes32)\":{\"notice\":\"Returns whether the hashed `strategyType` is registered.\"},\"projectMetadata(bytes32)\":{\"notice\":\"Metadata associated with the project that can be used on the frontend, expected to be encoded in UTF-8 JSON.Even though not ideomatic, this is a cheap solution to avoid infrastructure downtime within the first months after launch.\"},\"projectParams(bytes32)\":{\"notice\":\"Generic parameters that will always be forwarded to the subfactory. This could for example be the native token.\"},\"projectStrategyType(bytes32)\":{\"notice\":\"The associated strategy type hash of the project. All strategies under the project will thus be deployed using the subfactory of this strategy type.\"},\"strategyMetadata(bytes32)\":{\"notice\":\"Metadata associated with the strategy that can be used on the frontend, expected to be encoded in UTF-8 JSON.Even though not ideomatic, this is a cheap solution to avoid infrastructure downtime within the first months after launch.\"},\"subfactoryByType(bytes32)\":{\"notice\":\"Returns the registered subfactory of the strategy type. The subfactory is responsible for instantiating factories.\"},\"vaultChef()\":{\"notice\":\"The instance of the vaultChef to deploy strategies to.\"},\"vaultIdToStrategy(uint256)\":{\"notice\":\"Gets the strategy id associated with the vaultId.\"},\"zap()\":{\"notice\":\"The zapper\"}},\"notice\":\"TODO: There is no createVault function!\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/StrategyFactory.sol\":\"StrategyFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2d8b1825d587f3384d6d87655f3cb66f0d71fe8dda7d98f2f9267a4bb842927d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf87bd7a150c81aad67bb354413fe55cb005e922c6e48d3580a63e32efa913c74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9dc1ad66ada6a503bef1ffde62ac688c58eac660fe50c054f6e49e3b27ae295d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/factories/StrategyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IVaultChef.sol\\\";\\nimport \\\"../interfaces/ISubFactory.sol\\\";\\nimport \\\"../interfaces/IZapHandler.sol\\\";\\nimport \\\"../interfaces/IZap.sol\\\";\\n\\n/// @notice The strategy factory is a utility contracts used by Violin to deploy new strategies more swiftly and securely.\\n/// @notice The admin can register strategy types together with a SubFactory that creates instances of the relevant strategy type.\\n/// @notice Examples of strategy types are MC_PCS_V1, MC_GOOSE_V1, MC_PANTHER_V1...\\n/// @notice Once a few types are registered, new strategies can be easily deployed by registering the relevant project and then instantiating strategies on that project.\\n/// @dev All strategy types, projects and individual strategies are stored as keccak256 hashes. The deployed strategies are identified by keccak256(keccak256(projectId), keccak256(strategyId)).\\n/// @dev VAULTCHEF AUTH: The StrategyFactory must have the ADD_VAULT_ROLE on the governor.\\n/// @dev ZAPGOVERNANCE AUTH: The StrategyFactory must have the\\n\\n/// TODO: There is no createVault function!\\ncontract StrategyFactory is AccessControlEnumerableUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\\n    /// @notice The instance of the vaultChef to deploy strategies to.\\n    IVaultChef public vaultChef;\\n\\n    /// @notice The zapper\\n    IZap public zap;\\n\\n    //** STRATEGY TYPES **/\\n    /// @notice strategyTypes contains all registered hashed strategy types.\\n    EnumerableSetUpgradeable.Bytes32Set private strategyTypes;\\n    /// @notice Returns the registered subfactory of the strategy type. The subfactory is responsible for instantiating factories.\\n    mapping(bytes32 => ISubFactory) public subfactoryByType;\\n\\n    mapping(address => bool) public isSubfactory;\\n\\n    //** PROJECTS **/\\n    /// @notice All registered projects.\\n    EnumerableSetUpgradeable.Bytes32Set private projects;\\n    /// @notice The associated strategy type hash of the project. All strategies under the project will thus be deployed using the subfactory of this strategy type.\\n    mapping(bytes32 => bytes32) public projectStrategyType;\\n    /// @notice Generic parameters that will always be forwarded to the subfactory. This could for example be the native token.\\n    mapping(bytes32 => bytes) public projectParams;\\n    /// @notice Metadata associated with the project that can be used on the frontend, expected to be encoded in UTF-8 JSON.\\n    /// @notice Even though not ideomatic, this is a cheap solution to avoid infrastructure downtime within the first months after launch.\\n    mapping(bytes32 => bytes) public projectMetadata;\\n\\n    /// @notice List of strategies registered for the project.\\n    mapping(bytes32 => EnumerableSetUpgradeable.Bytes32Set)\\n        private projectStrategies;\\n\\n    //** STRATEGIES **/\\n\\n    /// @notice All registered strategies.\\n    /// @dev These are identified as keccak256(abi.encodePacked(keccak256(projectId), keccak256(strategyId))).\\n    EnumerableSetUpgradeable.Bytes32Set private strategies;\\n    /// @notice Metadata associated with the strategy that can be used on the frontend, expected to be encoded in UTF-8 JSON.\\n    /// @notice Even though not ideomatic, this is a cheap solution to avoid infrastructure downtime within the first months after launch.\\n    mapping(bytes32 => bytes) public strategyMetadata;\\n\\n    /// @notice Gets the vaultId associated with the strategyId.\\n    mapping(bytes32 => uint256) private strategyToVaultId;\\n    /// @notice Gets the strategy id associated with the vaultId.\\n    mapping(uint256 => bytes32) public vaultIdToStrategy;\\n\\n    /// @notice gets all strategy ids associated with an underlying token.\\n    mapping(IERC20 => EnumerableSetUpgradeable.Bytes32Set)\\n        private underlyingToStrategies;\\n\\n    bytes32 public constant REGISTER_STRATEGY_ROLE =\\n        keccak256(\\\"REGISTER_STRATEGY_ROLE\\\");\\n    bytes32 public constant REGISTER_PROJECT_ROLE =\\n        keccak256(\\\"REGISTER_PROJECT_ROLE\\\");\\n    bytes32 public constant CREATE_VAULT_ROLE = keccak256(\\\"CREATE_VAULT_ROLE\\\");\\n\\n    event StrategyTypeAdded(\\n        bytes32 indexed strategyType,\\n        ISubFactory indexed subfactory\\n    );\\n    event ProjectRegistered(\\n        bytes32 indexed projectId,\\n        bytes32 indexed strategyType,\\n        bool indexed isUpdate\\n    );\\n    event VaultRegistered(\\n        uint256 indexed vaultId,\\n        bytes32 indexed projectId,\\n        bytes32 indexed strategyId,\\n        bool isUpdate\\n    );\\n\\n    function initialize(IVaultChef _vaultChef, IZap _zap, address owner) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        vaultChef = _vaultChef;\\n        zap = _zap;\\n        vaultChef.poolLength(); // validate vaultChef\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\\n        _setupRole(REGISTER_STRATEGY_ROLE, owner);\\n        _setupRole(REGISTER_PROJECT_ROLE, owner);\\n        _setupRole(CREATE_VAULT_ROLE, owner);\\n    }\\n\\n    function registerStrategyType(\\n        string calldata strategyType,\\n        ISubFactory subfactory\\n    ) external onlyRole(REGISTER_STRATEGY_ROLE) {\\n        registerStrategyTypeRaw(\\n            keccak256(abi.encodePacked(strategyType)),\\n            subfactory\\n        );\\n    }\\n\\n    function registerStrategyTypeRaw(\\n        bytes32 strategyType,\\n        ISubFactory subfactory\\n    ) public onlyRole(REGISTER_STRATEGY_ROLE) {\\n        require(!strategyTypes.contains(strategyType), \\\"!exists\\\");\\n        strategyTypes.add(strategyType);\\n        subfactoryByType[strategyType] = subfactory;\\n        isSubfactory[address(subfactory)] = true;\\n\\n        emit StrategyTypeAdded(strategyType, subfactory);\\n    }\\n\\n    function registerProject(\\n        string calldata projectId,\\n        string calldata strategyType,\\n        bytes calldata params,\\n        bytes calldata metadata\\n    ) external onlyRole(REGISTER_PROJECT_ROLE) {\\n        registerProjectRaw(\\n            keccak256(abi.encodePacked(projectId)),\\n            keccak256(abi.encodePacked(strategyType)),\\n            params,\\n            metadata\\n        );\\n    }\\n\\n    function registerProjectRaw(\\n        bytes32 projectId,\\n        bytes32 strategyType,\\n        bytes calldata params,\\n        bytes calldata metadata\\n    ) public onlyRole(REGISTER_PROJECT_ROLE) {\\n        require(\\n            strategyTypes.contains(strategyType),\\n            \\\"!strategyType not found\\\"\\n        );\\n        bool exists = projects.contains(projectId);\\n        projectStrategyType[projectId] = strategyType;\\n        projectParams[projectId] = params;\\n        projectMetadata[projectId] = metadata;\\n\\n        emit ProjectRegistered(projectId, strategyType, exists);\\n    }\\n\\n    struct CreateVaultVars {\\n        bytes32 strategyUID;\\n        bool exists;\\n        IStrategy strategy;\\n        uint256 vaultId;\\n        bytes projectParams;\\n    }\\n\\n    function createVault(\\n        string calldata projectId,\\n        string calldata strategyId,\\n        IERC20 underlyingToken,\\n        bytes calldata params,\\n        bytes calldata metadata,\\n        uint16 performanceFee\\n    ) external onlyRole(CREATE_VAULT_ROLE) returns (uint256, IStrategy) {\\n        return\\n            createVaultRaw(\\n                keccak256(abi.encodePacked(projectId)),\\n                keccak256(abi.encodePacked(strategyId)),\\n                underlyingToken,\\n                params,\\n                metadata,\\n                performanceFee\\n            );\\n    }\\n\\n    function createVaultRaw(\\n        bytes32 projectId,\\n        bytes32 strategyId,\\n        IERC20 underlyingToken,\\n        bytes calldata params,\\n        bytes calldata metadata,\\n        uint16 performanceFee\\n    ) public onlyRole(CREATE_VAULT_ROLE) returns (uint256, IStrategy) {\\n        CreateVaultVars memory vars;\\n\\n        vars.strategyUID = getStrategyUID(projectId, strategyId);\\n        vars.exists = strategies.contains(vars.strategyUID);\\n        vars.projectParams = projectParams[projectId];\\n\\n        vars.strategy = subfactoryByType[projectStrategyType[projectId]]\\n            .deployStrategy(\\n                vaultChef,\\n                underlyingToken,\\n                vars.projectParams,\\n                params\\n            );\\n        vars.vaultId = vaultChef.poolLength();\\n        IVaultChef(vaultChef.owner()).addVault(vars.strategy, performanceFee); // .owner to get the governor which inherits the vaultchef interface\\n\\n        strategyMetadata[vars.strategyUID] = metadata;\\n\\n        // Indexing\\n        projectStrategies[projectId].add(vars.strategyUID);\\n        vaultIdToStrategy[vars.vaultId] = vars.strategyUID;\\n        strategyToVaultId[vars.strategyUID] = vars.vaultId;\\n        underlyingToStrategies[vars.strategy.underlyingToken()].add(\\n            vars.strategyUID\\n        );\\n\\n        emit VaultRegistered(vars.vaultId, projectId, strategyId, vars.exists);\\n        return (vars.vaultId, vars.strategy);\\n    }\\n\\n    function setRoute(address[] calldata route) external {\\n        require(isSubfactory[msg.sender], \\\"!subfactory\\\");\\n        // Only set the route if it actually exists.\\n        if (route.length > 0) {\\n            IERC20 from = IERC20(route[0]);\\n            IERC20 to = IERC20(route[route.length - 1]);\\n            IZapHandler zapHandler = IZapHandler(\\n                IZapHandler(zap.implementation()).owner()\\n            ); // go to the governance contract which mimics the IZapHandler interface\\n            if (zapHandler.routeLength(from, to) == 0) {\\n                zapHandler.setRoute(from, to, route);\\n            }\\n        }\\n    }\\n\\n    function getStrategyUID(bytes32 projectId, bytes32 strategyId)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(projectId, strategyId));\\n    }\\n\\n    //** VIEW FUNCTIONS **//\\n\\n    //** strategy types **/\\n\\n    /// @notice Returns whether the unhashed `strategyType` is registered.\\n    function isStrategyType(string calldata strategyType)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isStrategyTypeRaw(keccak256(abi.encodePacked(strategyType)));\\n    }\\n\\n    /// @notice Returns whether the hashed `strategyType` is registered.\\n    function isStrategyTypeRaw(bytes32 strategyType)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return strategyTypes.contains(strategyType);\\n    }\\n\\n    /// @notice Gets the length of the strategyType listing.\\n    function getStrategyTypeLength() public view returns (uint256) {\\n        return strategyTypes.length();\\n    }\\n\\n    /// @notice Gets the strategyType hash at a specific index in the listing.\\n    function getStrategyTypeAt(uint256 index) public view returns (bytes32) {\\n        return strategyTypes.at(index);\\n    }\\n\\n    /// @notice Lists the strategyType hashes within a specific range in the listing.\\n    function getStrategyTypes(uint256 from, uint256 amount)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return getPaginated(strategyTypes, from, amount);\\n    }\\n\\n    //** projects **/\\n\\n    /// @notice Returns whether the unhashed `projectId` is registered.\\n    function isProject(string calldata projectId) external view returns (bool) {\\n        return isStrategyTypeRaw(keccak256(abi.encodePacked(projectId)));\\n    }\\n\\n    /// @notice Returns whether the hashed `projectId` is registered.\\n    function isProjectRaw(bytes32 projectId) public view returns (bool) {\\n        return strategyTypes.contains(projectId);\\n    }\\n\\n    /// @notice Gets the length of the projects listing.\\n    function getProjectsLength() public view returns (uint256) {\\n        return projects.length();\\n    }\\n\\n    /// @notice Gets the project hash at a specific index in the listing.\\n    function getProjectAt(uint256 index) public view returns (bytes32) {\\n        return projects.at(index);\\n    }\\n\\n    /// @notice Lists the project hashes within a specific range in the listing.\\n    function getProjects(uint256 from, uint256 amount)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return getPaginated(projects, from, amount);\\n    }\\n\\n    /// @notice Gets the length (number) of strategies of a project listing.\\n    function getProjectStrategiesLength(string calldata projectId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            getProjectStrategiesLengthRaw(\\n                keccak256(abi.encodePacked(projectId))\\n            );\\n    }\\n\\n    /// @notice Gets the length (number) of strategies of a project listing.\\n    function getProjectStrategiesLengthRaw(bytes32 projectId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return projectStrategies[projectId].length();\\n    }\\n\\n    /// @notice Gets the project's strategy hash at a specific index in the listing.\\n    function getProjectStrategyAt(string calldata projectId, uint256 index)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            getProjectStrategyAtRaw(\\n                keccak256(abi.encodePacked(projectId)),\\n                index\\n            );\\n    }\\n\\n    /// @notice Gets the project's strategy hash at a specific index in the listing.\\n    function getProjectStrategyAtRaw(bytes32 projectId, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return projectStrategies[projectId].at(index);\\n    }\\n\\n    /// @notice Lists the project's strategy hashes within a specific range in the listing.\\n    function getProjectStrategies(\\n        string calldata projectId,\\n        uint256 from,\\n        uint256 amount\\n    ) external view returns (bytes32[] memory) {\\n        return\\n            getProjectStrategiesRaw(\\n                keccak256(abi.encodePacked(projectId)),\\n                from,\\n                amount\\n            );\\n    }\\n\\n    /// @notice Lists the project's strategy hashes within a specific range in the listing.\\n    function getProjectStrategiesRaw(\\n        bytes32 projectId,\\n        uint256 from,\\n        uint256 amount\\n    ) public view returns (bytes32[] memory) {\\n        return getPaginated(projectStrategies[projectId], from, amount);\\n    }\\n\\n    //** strategies **/\\n\\n    /// @notice Gets the length (number) of strategies of a project listing.\\n    function getStrategiesLength() external view returns (uint256) {\\n        return strategies.length();\\n    }\\n\\n    /// @notice Gets the strategy hash at a specific index in the listing.\\n    function getStrategyAt(uint256 index) external view returns (bytes32) {\\n        return strategies.at(index);\\n    }\\n\\n    /// @notice Lists the strategy hashes within a specific range in the listing.\\n    function getStrategies(uint256 from, uint256 amount)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return getPaginated(strategies, from, amount);\\n    }\\n\\n    //** underlying */\\n\\n    /// @notice Gets the length (number) of strategies of a project listing.\\n    function getUnderlyingStrategiesLength(IERC20 token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return underlyingToStrategies[token].length();\\n    }\\n\\n    /// @notice Gets the underlying tokens's strategy hash at a specific index in the listing.\\n    function getUnderlyingStrategyAt(IERC20 token, uint256 index)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return underlyingToStrategies[token].at(index);\\n    }\\n\\n    /// @notice Lists the underlying tokens's strategy hashes within a specific range in the listing.\\n    function getUnderlyingStrategies(\\n        IERC20 token,\\n        uint256 from,\\n        uint256 amount\\n    ) external view returns (bytes32[] memory) {\\n        return getPaginated(underlyingToStrategies[token], from, amount);\\n    }\\n\\n    function getPaginated(\\n        EnumerableSetUpgradeable.Bytes32Set storage set,\\n        uint256 from,\\n        uint256 amount\\n    ) private view returns (bytes32[] memory) {\\n        uint256 length = set.length();\\n        if (from >= length) {\\n            return new bytes32[](0);\\n        }\\n\\n        if (from + amount > length) {\\n            amount = length - from;\\n        }\\n\\n        bytes32[] memory types = new bytes32[](amount);\\n        for (uint256 i = 0; i < amount; i++) {\\n            types[i] == strategyTypes.at(from + i);\\n        }\\n        return types;\\n    }\\n    \\n    function setVaulchef(IVaultChef newVaultChef) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        vaultChef = newVaultChef;\\n    }\\n}\\n\",\"keccak256\":\"0x67839dc042787232843f4193cd2e5f3d57107c4f94c312f7329cc6b51360e769\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/1b27c13096d6e4389d62e7b0766a1db53fbb3f1b/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\npragma solidity ^0.8.6;\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x87eb2ca94004620e51f74478a2827910a30d5ec6b69e64606ddd8c8fc9a93831\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev The VaultChef implements the masterchef interface for compatibility with third-party tools.\\ninterface IMasterChef {\\n    /// @dev An active vault has a dummy allocPoint of 1 while an inactive one has an allocPoint of zero.\\n    /// @dev This is done for better compatibility with third-party tools.\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            IERC20 lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accTokenPerShare\\n        );\\n\\n    function userInfo(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    /// @dev Returns the total number of active vaults.\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\",\"keccak256\":\"0xee4671ef61bd5f079ef5ed17d1c1556c2a7b05ac33b0d94a76377ddc720c4550\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n  /**\\n     * @notice Gets the token this strategy compounds.\\n     * @dev This token might have a transfer-tax.\\n     * @dev Invariant: This variable may never change.\\n     */\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice Gets the total amount of tokens either idle in this strategy or staked in an underlying strategy.\\n     */\\n    function totalUnderlying() external view returns (uint256 totalUnderlying);\\n    /**\\n     * @notice Gets the total amount of tokens either idle in this strategy or staked in an underlying strategy and only the tokens actually staked.\\n     */\\n    function totalUnderlyingAndStaked() external view returns (uint256 totalUnderlying, uint256 totalUnderlyingStaked);\\n\\n    /**\\n     * @notice The panic function unstakes all staked funds from the strategy and leaves them idle in the strategy for withdrawal\\n     * @dev Authority: This function must only be callable by the VaultChef.\\n     */\\n    function panic() external;\\n\\n    /**\\n     * @notice Executes a harvest on the underlying vaultchef.\\n     * @dev Authority: This function must only be callable by the vaultchef.\\n     */\\n    function harvest() external;\\n    /**\\n     * @notice Deposits `amount` amount of underlying tokens in the underlying strategy\\n     * @dev Authority: This function must only be callable by the VaultChef.\\n     */\\n    function deposit(uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws `amount` amount of underlying tokens to `to`.\\n     * @dev Authority: This function must only be callable by the VaultChef.\\n     */\\n    function withdraw(address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws `amount` amount of `token` to `to`.\\n     * @notice This function is used to withdraw non-staking and non-native tokens accidentally sent to the strategy.\\n     * @notice It will also be used to withdraw tokens airdropped to the strategies.\\n     * @notice The underlying token can never be withdrawn through this method because VaultChef prevents it.\\n     * @dev Requirement: This function should in no way allow withdrawal of staking tokens\\n     * @dev Requirement: This function should in no way allow for the decline in shares or share value (this is also checked in the VaultChef);\\n     * @dev Validation is already done in the VaultChef that the staking token cannot be withdrawn.\\n     * @dev Authority: This function must only be callable by the VaultChef.\\n     */\\n    function inCaseTokensGetStuck(\\n        IERC20 token,\\n        uint256 amount,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9408b247e1d3d0378f764e92fc67d2dc7fc1e60b58b60bf5cce0a98141e67ba6\",\"license\":\"MIT\"},\"contracts/interfaces/ISubFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IVaultChef.sol\\\";\\n\\ninterface ISubFactory {\\n    function deployStrategy(\\n        IVaultChef vaultChef,\\n        IERC20 underlyingToken,\\n        bytes calldata projectData,\\n        bytes calldata strategyData\\n    ) external returns (IStrategy);\\n}\\n\",\"keccak256\":\"0xa42619e9a2b4e19cdfc3180d1ec35d63e8f8b8d66839111b141371e4369031fd\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IVaultChefCore.sol\\\";\\nimport \\\"./IVaultChefWrapper.sol\\\";\\n\\n\\n/// @notice Interface for derivative protocols.\\ninterface IVaultChef is IVaultChefWrapper, IVaultChefCore {\\n    function owner() external view returns (address);\\n}\",\"keccak256\":\"0x8cdcee41b584a505950a195902c1d06f08045fc47be1168d315f55b7a973c20d\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultChefCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\n\\n/**\\n * @notice The VaultChef is a vault management contract that manages vaults, their strategies and the share positions of investors in these vaults.\\n * @notice Positions are not hardcoded into the contract like traditional staking contracts, instead they are managed as ERC-1155 receipt tokens.\\n * @notice This receipt-token mechanism is supposed to simplify zapping and other derivative protocols.\\n * @dev The VaultChef contract has the following design principles.\\n * @dev 1. Simplicity of Strategies: Strategies should be as simple as possible.\\n * @dev 2. Control of Governance: Governance should never be able to steal underlying funds.\\n * @dev 3. Auditability: It should be easy for third-party reviewers to assess the safety of the VaultChef.\\n */\\ninterface IVaultChefCore is IERC1155 {\\n    /// @notice A vault is a strategy users can stake underlying tokens in to receive a share of the vault value.\\n    struct Vault {\\n        /// @notice The token this strategy will compound.\\n        IERC20 underlyingToken;\\n        /// @notice The timestamp of the last harvest, set to zero while no harvests have happened.\\n        uint96 lastHarvestTimestamp;\\n        /// @notice The strategy contract.\\n        IStrategy strategy;\\n        /// @notice The performance fee portion of the harvests that is sent to the feeAddress, denominated by 10,000.\\n        uint16 performanceFeeBP;\\n        /// @notice Whether deposits are currently paused.\\n        bool paused;\\n        /// @notice Whether the vault has panicked which means the funds are pulled from the strategy and it is paused forever.\\n        bool panicked;\\n    }\\n\\n    /**\\n     * @notice Deposit `underlyingAmount` amount of underlying tokens into the vault and receive `sharesReceived` proportional to the actually staked amount.\\n     * @notice Deposits mint `sharesReceived` receipt tokens as ERC-1155 tokens to msg.sender with the tokenId equal to the vaultId.\\n     * @notice The tokens are transferred from `msg.sender` which requires approval if pulled is set to false, otherwise `msg.sender` needs to implement IPullDepositor.\\n     * @param vaultId The id of the vault.\\n     * @param underlyingAmount The intended amount of tokens to deposit (this might not equal the actual deposited amount due to tx/stake fees or the pull mechanism).\\n     * @param pulled Uses a pull-based deposit hook if set to true, otherwise traditional safeTransferFrom. The pull-based mechanism allows the depositor to send tokens using a hook.\\n     * @param minSharesReceived The minimum amount of shares that must be received, or the transaction reverts.\\n     * @dev This pull-based methodology is extremely valuable for zapping transfer-tax tokens more economically.\\n     * @dev `msg.sender` must be a smart contract implementing the `IPullDepositor` interface.\\n     * @return sharesReceived The number of shares minted to the msg.sender.\\n     */\\n    function depositUnderlying(\\n        uint256 vaultId,\\n        uint256 underlyingAmount,\\n        bool pulled,\\n        uint256 minSharesReceived\\n    ) external returns (uint256 sharesReceived);\\n\\n    /**\\n     * @notice Withdraws `shares` from the vault into underlying tokens to the `msg.sender`.\\n     * @notice Burns `shares` receipt tokens from the `msg.sender`.\\n     * @param vaultId The id of the vault.\\n     * @param shares The amount of shares to burn, underlying tokens will be sent to msg.sender proportionally.\\n     * @param minUnderlyingReceived The minimum amount of underlying tokens that must be received, or the transaction reverts.\\n     */\\n    function withdrawShares(\\n        uint256 vaultId,\\n        uint256 shares,\\n        uint256 minUnderlyingReceived\\n    ) external returns (uint256 underlyingReceived);\\n\\n    /**\\n     * @notice Withdraws `shares` from the vault into underlying tokens to the `to` address.\\n     * @notice To prevent phishing, we require msg.sender to be a contract as this is intended for more economical zapping of transfer-tax token withdrawals.\\n     * @notice Burns `shares` receipt tokens from the `msg.sender`.\\n     * @param vaultId The id of the vault.\\n     * @param shares The amount of shares to burn, underlying tokens will be sent to msg.sender proportionally.\\n     * @param minUnderlyingReceived The minimum amount of underlying tokens that must be received, or the transaction reverts.\\n     */\\n    function withdrawSharesTo(\\n        uint256 vaultId,\\n        uint256 shares,\\n        uint256 minUnderlyingReceived,\\n        address to\\n    ) external returns (uint256 underlyingReceived);\\n\\n    /**\\n     * @notice Total amount of shares in circulation for a given vaultId.\\n     * @param vaultId The id of the vault.\\n     * @return The total number of shares currently in circulation.\\n     */\\n    function totalSupply(uint256 vaultId) external view returns (uint256);\\n\\n    /**\\n     * @notice Calls harvest on the underlying strategy to compound pending rewards to underlying tokens.\\n     * @notice The performance fee is minted to the owner as shares, it can never be greater than 5% of the underlyingIncrease.\\n     * @return underlyingIncrease The amount of underlying tokens generated.\\n     * @dev Can only be called by owner.\\n     */\\n    function harvest(uint256 vaultId)\\n        external\\n        returns (uint256 underlyingIncrease);\\n\\n    /**\\n     * @notice Adds a new vault to the vaultchef.\\n     * @param strategy The strategy contract that manages the allocation of the funds for this vault, also defines the underlying token\\n     * @param performanceFeeBP The percentage of the harvest rewards that are given to the governance, denominated by 10,000 and maximum 5%.\\n     * @dev Can only be called by owner.\\n     */\\n    function addVault(IStrategy strategy, uint16 performanceFeeBP) external;\\n\\n    /**\\n     * @notice Updates the performanceFee of the vault.\\n     * @param vaultId The id of the vault.\\n     * @param performanceFeeBP The percentage of the harvest rewards that are given to the governance, denominated by 10,000 and maximum 5%.\\n     * @dev Can only be called by owner.\\n     */\\n    function setVault(uint256 vaultId, uint16 performanceFeeBP) external;\\n    /**\\n     * @notice Allows the `pullDepositor` to create pull-based deposits (useful for zapping contract).\\n     * @notice Having a whitelist is not necessary for this functionality as it is safe but upon defensive code recommendations one was added in.\\n     * @dev Can only be called by owner.\\n     */\\n    function setPullDepositor(address pullDepositor, bool isAllowed) external;\\n    \\n    /**\\n     * @notice Withdraws funds from the underlying staking contract to the strategy and irreversibly pauses the vault.\\n     * @param vaultId The id of the vault.\\n     * @dev Can only be called by owner.\\n     */\\n    function panicVault(uint256 vaultId) external;\\n\\n    /**\\n     * @notice Returns true if there is a vault associated with the `vaultId`.\\n     * @param vaultId The id of the vault.\\n     */\\n    function isValidVault(uint256 vaultId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the Vault information of the vault at `vaultId`, returns if non-existent.\\n     * @param vaultId The id of the vault.\\n     */\\n    function vaultInfo(uint256 vaultId) external view returns (IERC20 underlyingToken, uint96 lastHarvestTimestamp, IStrategy strategy, uint16 performanceFeeBP, bool paused, bool panicked);\\n\\n    /**\\n     * @notice Pauses the vault which means deposits and harvests are no longer permitted, reverts if already set to the desired value.\\n     * @param vaultId The id of the vault.\\n     * @param paused True to pause, false to unpause.\\n     * @dev Can only be called by owner.\\n     */\\n    function pauseVault(uint256 vaultId, bool paused) external;\\n\\n    /**\\n     * @notice Transfers tokens from the VaultChef to the `to` address.\\n     * @notice Cannot be abused by governance since the protocol never ever transfers tokens to the VaultChef. Any tokens stored there are accidentally sent there.\\n     * @param token The token to withdraw from the VaultChef.\\n     * @param to The address to send the token to.\\n     * @dev Can only be called by owner.\\n     */\\n    function inCaseTokensGetStuck(IERC20 token, address to) external;\\n\\n    /**\\n     * @notice Transfers tokens from the underlying strategy to the `to` address.\\n     * @notice Cannot be abused by governance since VaultChef prevents token to be equal to the underlying token.\\n     * @param token The token to withdraw from the strategy.\\n     * @param to The address to send the token to.\\n     * @param amount The amount of tokens to withdraw.\\n     * @dev Can only be called by owner.\\n     */\\n    function inCaseVaultTokensGetStuck(\\n        uint256 vaultId,\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa36d44475262052c5181f708133295e97ea151f783fbb240b5b42b8f5718a397\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultChefWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IMasterChef.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\ninterface IVaultChefWrapper is IMasterChef, IERC20Metadata{\\n     /**\\n     * @notice Interface function to fetch the total underlying tokens inside a vault.\\n     * @notice Calls the totalUnderlying function on the vault strategy.\\n     * @param vaultId The id of the vault.\\n     */\\n    function totalUnderlying(uint256 vaultId) external view returns (uint256);\\n\\n     /**\\n     * @notice Changes the ERC-20 metadata for etherscan listing.\\n     * @param newName The new ERC-20-like token name.\\n     * @param newSymbol The new ERC-20-like token symbol.\\n     * @param newDecimals The new ERC-20-like token decimals.\\n     */\\n    function changeMetadata(\\n        string memory newName,\\n        string memory newSymbol,\\n        uint8 newDecimals\\n    ) external;\\n\\n     /**\\n     * @notice Sets the ERC-1155 metadata URI.\\n     * @param newURI The new ERC-1155 metadata URI.\\n     */\\n    function setURI(string memory newURI) external;\\n\\n    /// @notice mapping that returns true if the strategy is set as a vault.\\n    function strategyExists(IStrategy strategy) external view returns(bool);\\n\\n\\n    /// @notice Utility mapping for UI to figure out the vault id of a strategy.\\n    function strategyVaultId(IStrategy strategy) external view returns(uint256);\\n\\n}\\n\",\"keccak256\":\"0x305ef4a7d8724014f2b6c985d5c897f2392f5dccff5782248169f13e88c70968\",\"license\":\"MIT\"},\"contracts/interfaces/IZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IZapHandler.sol\\\";\\n\\n/// @notice The IZap interface allows contracts to swap a token for another token without having to directly interact with verbose AMMs directly.\\n/// @notice It furthermore allows to zap to and from an LP pair within a single transaction.\\ninterface IZap {\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `recipient`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Reverts if the `recipient` received less tokens than `minReceived`.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `recipient`.\\n    * @param recipient The destination address to receive the `toToken`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    * @param minReceived The minimum amount of `toToken` the `recipient` should receive. Otherwise the transaction reverts.\\n    */\\n    function swapERC20(IERC20 fromToken, IERC20 toToken, address recipient, uint256 amount, uint256 minReceived) external returns (uint256 received);\\n\\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `msg.sender`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `msg.sender`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    */\\n    function swapERC20Fast(IERC20 fromToken, IERC20 toToken, uint256 amount) external;\\n\\n    function implementation() external view returns (IZapHandler);\\n}\",\"keccak256\":\"0xe5cb986010d97ee1c2626b6752c1bd01d2c3c584896ffbd720c7a7a1a7b60bfc\",\"license\":\"MIT\"},\"contracts/interfaces/IZapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice The IZap interface allows contracts to swap a token for another token without having to directly interact with verbose AMMs directly.\\n/// @notice It furthermore allows to zap to and from an LP pair within a single transaction.\\ninterface IZapHandler {\\n    struct Factory {\\n        /// @dev The address of the factory.\\n        address factory;\\n        /// @dev The fee nominator of the AMM, usually set to 997 for a 0.3% fee.\\n        uint32 amountsOutNominator;\\n        /// @dev The fee denominator of the AMM, usually set to 1000.\\n        uint32 amountsOutDenominator;\\n    }\\n\\n    function setFactory(\\n        address factory,\\n        uint32 amountsOutNominator,\\n        uint32 amountsOutDenominator\\n    ) external;\\n\\n    function setRoute(\\n        IERC20 from,\\n        IERC20 to,\\n        address[] memory inputRoute\\n    ) external;\\n    function factories(address factoryAddress) external view returns (Factory memory);\\n\\n    function routeLength(IERC20 token0, IERC20 token1) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n}\",\"keccak256\":\"0x1685a262b52676b84856cc9fc2258ee75552f92e1ea99bd6ffdf31f10908b503\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612a2b806100206000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c806391d148541161019d578063ca15c873116100e9578063db84b46e116100a2578063f787a8031161007c578063f787a8031461072c578063fad316a21461073f578063fe6e018b1461063e578063ff95bbcd1461075257600080fd5b8063db84b46e146106f1578063e4f3fb4b14610704578063e74fc3d71461071757600080fd5b8063ca15c8731461067f578063cdfdea4c14610692578063d14cde9b146106a5578063d547741f146106b8578063d8cb6b9e146106cb578063db59f3c8146106de57600080fd5b8063ac893d9011610156578063b860bcec11610130578063b860bcec1461063e578063c022c01314610651578063c0c53b8b14610664578063c6bdc0a21461067757600080fd5b8063ac893d90146105e8578063b0327821146105fb578063b108365a1461062b57600080fd5b806391d1485414610595578063941bdd5b146105a85780639666b83b146105b05780639998b877146105b8578063a217fddf146105cd578063a84ce2b5146105d557600080fd5b8063467fcc871161025c5780636f98dd7d116102155780637786da9e116101ef5780637786da9e14610549578063807170cf1461055c57806380dc61671461056f5780639010d07c1461058257600080fd5b80636f98dd7d1461050357806373994d9f1461051657806376977aa11461052957600080fd5b8063467fcc871461047a57806355a8a4661461049a57806357a5472c146104bd5780635ada6acb146104d05780636383b24d146104f057806369b015c41461038f57600080fd5b8063248a9ca3116102c95780632dbeed5d116102a35780632dbeed5d1461042e5780632f2ff15d1461044157806336568abe14610454578063372aa0eb1461046757600080fd5b8063248a9ca3146103b7578063262d6152146103da57806327b3cc3d1461040557600080fd5b806301ffc9a71461031157806308f3cf001461033957806315e41c751461035a5780631645cdb81461037a578063172358721461038f5780631fbd4c1e146103a2575b600080fd5b61032461031f36600461225d565b610765565b60405190151581526020015b60405180910390f35b61034c61034736600461256d565b610790565b604051908152602001610330565b61036d61036836600461209d565b6107ce565b6040516103309190612718565b61034c60008051602061299683398151915281565b61032461039d366004612333565b610868565b6103b56103b0366004611fee565b61089b565b005b61034c6103c536600461209d565b60009081526065602052604090206001015490565b60ca546103ed906001600160a01b031681565b6040516001600160a01b039091168152602001610330565b6103ed61041336600461209d565b60cd602052600090815260409020546001600160a01b031681565b6103b561043c3660046120b6565b6108ca565b6103b561044f3660046120b6565b6109a7565b6103b56104623660046120b6565b6109ce565b6103b56104753660046120e6565b6109f0565b61034c61048836600461209d565b60d96020526000908152604090205481565b6103246104a8366004611fee565b60ce6020526000908152604090205460ff1681565b6103b56104cb366004612375565b610aec565b6104e36104de3660046122b3565b610b3d565b60405161033091906126d4565b6104e36104fe366004612231565b610b63565b6104e361051136600461220f565b610b7f565b61034c61052436600461209d565b610b8d565b61034c61053736600461209d565b60d16020526000908152604090205481565b6104e36105573660046125b9565b610b9a565b61034c61056a36600461209d565b610bd8565b61034c61057d36600461209d565b610be5565b6103ed61059036600461220f565b610bfc565b6103246105a33660046120b6565b610c14565b61034c610c3f565b61034c610c50565b61034c6000805160206129d683398151915281565b61034c600081565b6104e36105e336600461220f565b610c5c565b6104e36105f636600461220f565b610c6a565b61060e610609366004612485565b610c78565b604080519283526001600160a01b03909116602083015201610330565b61034c61063936600461209d565b610d08565b61032461064c36600461209d565b610d15565b61060e61065f366004612169565b610d22565b6103b56106723660046122e8565b6111d8565b61034c61133e565b61034c61068d36600461209d565b61134a565b61036d6106a036600461209d565b611361565b61034c6106b3366004612333565b61137a565b6103b56106c63660046120b6565b6113ad565b61034c6106d9366004612287565b6113b7565b61034c6106ec366004611fee565b6113d9565b6103b56106ff366004612028565b6113fa565b60c9546103ed906001600160a01b031681565b61034c6000805160206129b683398151915281565b61034c61073a36600461220f565b61169c565b6103b561074d3660046123c1565b6116b4565b61036d61076036600461209d565b61172b565b60006001600160e01b03198216635a05180f60e01b148061078a575061078a82611744565b92915050565b60006107c484846040516020016107a892919061264f565b604051602081830303815290604052805190602001208361169c565b90505b9392505050565b60d760205260009081526040902080546107e7906128d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610813906128d2565b80156108605780601f1061083557610100808354040283529160200191610860565b820191906000526020600020905b81548152906001019060200180831161084357829003601f168201915b505050505081565b60006107c7838360405160200161088092919061264f565b60405160208183030381529060405280519060200120610d15565b60006108a78133611779565b5060c980546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206129b68339815191526108e38133611779565b6108ee60cb846117dd565b1561092a5760405162461bcd60e51b81526020600482015260076024820152662165786973747360c81b60448201526064015b60405180910390fd5b61093560cb846117f5565b50600083815260cd6020908152604080832080546001600160a01b0319166001600160a01b03871690811790915580845260ce909252808320805460ff1916600117905551909185917ff971fd948b9be62bcf3cb3a7a663e95857b2eb95ac8a7478b0362d9583a691fe9190a3505050565b6109b18282611801565b60008281526097602052604090206109c99082611827565b505050565b6109d8828261183c565b60008281526097602052604090206109c990826118b6565b6000805160206129d6833981519152610a098133611779565b610a1460cb876117dd565b610a605760405162461bcd60e51b815260206004820152601760248201527f21737472617465677954797065206e6f7420666f756e640000000000000000006044820152606401610921565b6000610a6d60cf896117dd565b600089815260d1602090815260408083208b905560d29091529020909150610a96908787611eea565b50600088815260d360205260409020610ab0908585611eea565b5080151587897f128dde6be881a1aa689e72df1389c8775dc0db31307d824dc7c5d4013e42d72060405160405180910390a45050505050505050565b6000805160206129b6833981519152610b058133611779565b610b378484604051602001610b1b92919061264f565b60405160208183030381529060405280519060200120836108ca565b50505050565b6001600160a01b038316600090815260da602052604090206060906107c49084846118cb565b600083815260d4602052604090206060906107c49084846118cb565b60606107c760cb84846118cb565b600061078a60d5836119af565b6060610bcf8585604051602001610bb292919061264f565b604051602081830303815290604052805190602001208484610b63565b95945050505050565b600061078a60cb836119af565b600081815260d46020526040812061078a906119bb565b60008281526097602052604081206107c790836119af565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610c4b60cb6119bb565b905090565b6000610c4b60d56119bb565b60606107c760cf84846118cb565b60606107c760d584846118cb565b600080600080516020612996833981519152610c948133611779565b610cf48d8d604051602001610caa92919061264f565b604051602081830303815290604052805190602001208c8c604051602001610cd392919061264f565b604051602081830303815290604052805190602001208b8b8b8b8b8b610d22565b92509250509a509a98505050505050505050565b600061078a60cf836119af565b600061078a60cb836117dd565b600080600080516020612996833981519152610d3e8133611779565b6040805160a0810182526000808252602082018190529181018290526060808201929092526080810191909152610d9c8c8c604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b808252610dab9060d5906117dd565b151560208083019190915260008d815260d2909152604090208054610dcf906128d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfb906128d2565b8015610e485780601f10610e1d57610100808354040283529160200191610e48565b820191906000526020600020905b815481529060010190602001808311610e2b57829003601f168201915b50505050506080820190815260008d815260d16020908152604080832054835260cd909152908190205460c954925191516303555d2760e41b81526001600160a01b0391821693633555d27093610eac93909116918f91908f908f90600401612792565b602060405180830381600087803b158015610ec657600080fd5b505af1158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe919061200b565b6001600160a01b0390811660408084019190915260c954815163040f1f6d60e11b8152915192169163081e3eda91600480820192602092909190829003018186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f84919061260a565b606082015260c95460408051638da5cb5b60e01b815290516001600160a01b0390921691638da5cb5b91600480820192602092909190829003018186803b158015610fce57600080fd5b505afa158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611006919061200b565b604080830151905163ce192fc960e01b81526001600160a01b03918216600482015261ffff8816602482015291169063ce192fc990604401600060405180830381600087803b15801561105857600080fd5b505af115801561106c573d6000803e3d6000fd5b50508251600090815260d76020526040902061108c925090508888611eea565b50805160008d815260d4602052604090206110a6916117f5565b508051606082018051600090815260d9602090815260408083209490945591518451825260d88352838220558351838501518451632495a59960e01b8152945161117495929460da94936001600160a01b0390931692632495a5999260048083019392829003018186803b15801561111d57600080fd5b505afa158015611131573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611155919061200b565b6001600160a01b031681526020810191909152604001600020906117f5565b508a8c82606001517f05ff921a9f275cc75949cb0c8357b8866efe3e3bbd520b19b8cf59bf53c1a92584602001516040516111b3911515815260200190565b60405180910390a4806060015181604001519350935050509850989650505050505050565b600054610100900460ff16806111f1575060005460ff16155b61120d5760405162461bcd60e51b8152600401610921906127f3565b600054610100900460ff1615801561122f576000805461ffff19166101011790555b6112376119c5565b60c980546001600160a01b038087166001600160a01b0319928316811790935560ca8054918716919092161790556040805163040f1f6d60e11b8152905163081e3eda91600480820192602092909190829003018186803b15801561129b57600080fd5b505afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d3919061260a565b506112df600083611a51565b6112f76000805160206129b683398151915283611a51565b61130f6000805160206129d683398151915283611a51565b61132760008051602061299683398151915283611a51565b8015610b37576000805461ff001916905550505050565b6000610c4b60cf6119bb565b600081815260976020526040812061078a906119bb565b60d360205260009081526040902080546107e7906128d2565b60006107c7838360405160200161139292919061264f565b60405160208183030381529060405280519060200120610be5565b6109d88282611a5b565b6001600160a01b038216600090815260da602052604081206107c790836119af565b6001600160a01b038116600090815260da6020526040812061078a906119bb565b33600090815260ce602052604090205460ff166114475760405162461bcd60e51b815260206004820152600b60248201526a21737562666163746f727960a81b6044820152606401610921565b80156116985760008282600081811061146257611462612954565b90506020020160208101906114779190611fee565b905060008383611488600182612878565b81811061149757611497612954565b90506020020160208101906114ac9190611fee565b9050600060ca60009054906101000a90046001600160a01b03166001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fe57600080fd5b505afa158015611512573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611536919061200b565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156e57600080fd5b505afa158015611582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a6919061200b565b6040516331e376fd60e11b81526001600160a01b0385811660048301528481166024830152919250908216906363c6edfa9060440160206040518083038186803b1580156115f357600080fd5b505afa158015611607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162b919061260a565b6116945760405163131a049360e11b81526001600160a01b0382169063263409269061166190869086908a908a9060040161272b565b600060405180830381600087803b15801561167b57600080fd5b505af115801561168f573d6000803e3d6000fd5b505050505b5050505b5050565b600082815260d4602052604081206107c790836119af565b6000805160206129d68339815191526116cd8133611779565b61168f89896040516020016116e392919061264f565b60405160208183030381529060405280519060200120888860405160200161170c92919061264f565b60405160208183030381529060405280519060200120878787876109f0565b60d260205260009081526040902080546107e7906128d2565b60006001600160e01b03198216637965db0b60e01b148061078a57506301ffc9a760e01b6001600160e01b031983161461078a565b6117838282610c14565b6116985761179b816001600160a01b03166014611a81565b6117a6836020611a81565b6040516020016117b792919061265f565b60408051601f198184030181529082905262461bcd60e51b825261092191600401612718565b600081815260018301602052604081205415156107c7565b60006107c78383611c1d565b60008281526065602052604090206001015461181d8133611779565b6109c98383611c6c565b60006107c7836001600160a01b038416611c1d565b6001600160a01b03811633146118ac5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610921565b6116988282611cf2565b60006107c7836001600160a01b038416611d59565b606060006118d8856119bb565b90508084106118f75750506040805160008152602081019091526107c7565b806119028486612841565b1115611915576119128482612878565b92505b60008367ffffffffffffffff8111156119305761193061296a565b604051908082528060200260200182016040528015611959578160200160208202803683370190505b50905060005b848110156119a55761197c6119748288612841565b60cb906119af565b82828151811061198e5761198e612954565b5082915061199d90508161290d565b91505061195f565b5095945050505050565b60006107c78383611e4c565b600061078a825490565b600054610100900460ff16806119de575060005460ff16155b6119fa5760405162461bcd60e51b8152600401610921906127f3565b600054610100900460ff16158015611a1c576000805461ffff19166101011790555b611a24611e76565b611a2c611e76565b611a34611e76565b611a3c611e76565b8015611a4e576000805461ff00191690555b50565b6109b18282611ee0565b600082815260656020526040902060010154611a778133611779565b6109c98383611cf2565b60606000611a90836002612859565b611a9b906002612841565b67ffffffffffffffff811115611ab357611ab361296a565b6040519080825280601f01601f191660200182016040528015611add576020820181803683370190505b509050600360fc1b81600081518110611af857611af8612954565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b2757611b27612954565b60200101906001600160f81b031916908160001a9053506000611b4b846002612859565b611b56906001612841565b90505b6001811115611bce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b8a57611b8a612954565b1a60f81b828281518110611ba057611ba0612954565b60200101906001600160f81b031916908160001a90535060049490941c93611bc7816128bb565b9050611b59565b5083156107c75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610921565b6000818152600183016020526040812054611c645750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561078a565b50600061078a565b611c768282610c14565b6116985760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cae3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611cfc8282610c14565b156116985760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611e42576000611d7d600183612878565b8554909150600090611d9190600190612878565b9050818114611df6576000866000018281548110611db157611db1612954565b9060005260206000200154905080876000018481548110611dd457611dd4612954565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e0757611e0761293e565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061078a565b600091505061078a565b6000826000018281548110611e6357611e63612954565b9060005260206000200154905092915050565b600054610100900460ff1680611e8f575060005460ff16155b611eab5760405162461bcd60e51b8152600401610921906127f3565b600054610100900460ff16158015611a3c576000805461ffff19166101011790558015611a4e576000805461ff001916905550565b6116988282611c6c565b828054611ef6906128d2565b90600052602060002090601f016020900481019282611f185760008555611f5e565b82601f10611f315782800160ff19823516178555611f5e565b82800160010185558215611f5e579182015b82811115611f5e578235825591602001919060010190611f43565b50611f6a929150611f6e565b5090565b5b80821115611f6a5760008155600101611f6f565b60008083601f840112611f9557600080fd5b50813567ffffffffffffffff811115611fad57600080fd5b602083019150836020828501011115611fc557600080fd5b9250929050565b8035611fd781612980565b919050565b803561ffff81168114611fd757600080fd5b60006020828403121561200057600080fd5b81356107c781612980565b60006020828403121561201d57600080fd5b81516107c781612980565b6000806020838503121561203b57600080fd5b823567ffffffffffffffff8082111561205357600080fd5b818501915085601f83011261206757600080fd5b81358181111561207657600080fd5b8660208260051b850101111561208b57600080fd5b60209290920196919550909350505050565b6000602082840312156120af57600080fd5b5035919050565b600080604083850312156120c957600080fd5b8235915060208301356120db81612980565b809150509250929050565b600080600080600080608087890312156120ff57600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561212557600080fd5b6121318a838b01611f83565b9096509450606089013591508082111561214a57600080fd5b5061215789828a01611f83565b979a9699509497509295939492505050565b60008060008060008060008060c0898b03121561218557600080fd5b8835975060208901359650604089013561219e81612980565b9550606089013567ffffffffffffffff808211156121bb57600080fd5b6121c78c838d01611f83565b909750955060808b01359150808211156121e057600080fd5b506121ed8b828c01611f83565b9094509250612200905060a08a01611fdc565b90509295985092959890939650565b6000806040838503121561222257600080fd5b50508035926020909101359150565b60008060006060848603121561224657600080fd5b505081359360208301359350604090920135919050565b60006020828403121561226f57600080fd5b81356001600160e01b0319811681146107c757600080fd5b6000806040838503121561229a57600080fd5b82356122a581612980565b946020939093013593505050565b6000806000606084860312156122c857600080fd5b83356122d381612980565b95602085013595506040909401359392505050565b6000806000606084860312156122fd57600080fd5b833561230881612980565b9250602084013561231881612980565b9150604084013561232881612980565b809150509250925092565b6000806020838503121561234657600080fd5b823567ffffffffffffffff81111561235d57600080fd5b61236985828601611f83565b90969095509350505050565b60008060006040848603121561238a57600080fd5b833567ffffffffffffffff8111156123a157600080fd5b6123ad86828701611f83565b909450925050602084013561232881612980565b6000806000806000806000806080898b0312156123dd57600080fd5b883567ffffffffffffffff808211156123f557600080fd5b6124018c838d01611f83565b909a50985060208b013591508082111561241a57600080fd5b6124268c838d01611f83565b909850965060408b013591508082111561243f57600080fd5b61244b8c838d01611f83565b909650945060608b013591508082111561246457600080fd5b506124718b828c01611f83565b999c989b5096995094979396929594505050565b60008060008060008060008060008060c08b8d0312156124a457600080fd5b8a3567ffffffffffffffff808211156124bc57600080fd5b6124c88e838f01611f83565b909c509a5060208d01359150808211156124e157600080fd5b6124ed8e838f01611f83565b909a50985088915061250160408e01611fcc565b975060608d013591508082111561251757600080fd5b6125238e838f01611f83565b909750955060808d013591508082111561253c57600080fd5b506125498d828e01611f83565b909450925061255c905060a08c01611fdc565b90509295989b9194979a5092959850565b60008060006040848603121561258257600080fd5b833567ffffffffffffffff81111561259957600080fd5b6125a586828701611f83565b909790965060209590950135949350505050565b600080600080606085870312156125cf57600080fd5b843567ffffffffffffffff8111156125e657600080fd5b6125f287828801611f83565b90989097506020870135966040013595509350505050565b60006020828403121561261c57600080fd5b5051919050565b6000815180845261263b81602086016020860161288f565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161269781601785016020880161288f565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126c881602884016020880161288f565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561270c578351835292840192918401916001016126f0565b50909695505050505050565b6020815260006107c76020830184612623565b6001600160a01b0385811682528481166020808401919091526060604084018190528301849052600091859160808501845b8781101561278457843561277081612980565b84168252938201939082019060010161275d565b509998505050505050505050565b6001600160a01b038681168252851660208201526080604082018190526000906127be90830186612623565b8281036060840152838152838560208301376000602085830101526020601f19601f8601168201019150509695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561285457612854612928565b500190565b600081600019048311821515161561287357612873612928565b500290565b60008282101561288a5761288a612928565b500390565b60005b838110156128aa578181015183820152602001612892565b83811115610b375750506000910152565b6000816128ca576128ca612928565b506000190190565b600181811c908216806128e657607f821691505b6020821081141561290757634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561292157612921612928565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a4e57600080fdfedf8db4b3f0e355fdb17cbf7574c8af9d27ce4756db4efb6006ec8d3f04f391c4e71ec9665f24fd34c984715bd779a0519d33e9ab5ea271286986ff1d631504cf2346b08f6a458a95934836936988f77c5b147e7700d817767c56316d1a6f469ca2646970667358221220e85c6936afea04b18170d1098a7b274e5abb5a6842c5bd31090fb6f2fd408b5164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c806391d148541161019d578063ca15c873116100e9578063db84b46e116100a2578063f787a8031161007c578063f787a8031461072c578063fad316a21461073f578063fe6e018b1461063e578063ff95bbcd1461075257600080fd5b8063db84b46e146106f1578063e4f3fb4b14610704578063e74fc3d71461071757600080fd5b8063ca15c8731461067f578063cdfdea4c14610692578063d14cde9b146106a5578063d547741f146106b8578063d8cb6b9e146106cb578063db59f3c8146106de57600080fd5b8063ac893d9011610156578063b860bcec11610130578063b860bcec1461063e578063c022c01314610651578063c0c53b8b14610664578063c6bdc0a21461067757600080fd5b8063ac893d90146105e8578063b0327821146105fb578063b108365a1461062b57600080fd5b806391d1485414610595578063941bdd5b146105a85780639666b83b146105b05780639998b877146105b8578063a217fddf146105cd578063a84ce2b5146105d557600080fd5b8063467fcc871161025c5780636f98dd7d116102155780637786da9e116101ef5780637786da9e14610549578063807170cf1461055c57806380dc61671461056f5780639010d07c1461058257600080fd5b80636f98dd7d1461050357806373994d9f1461051657806376977aa11461052957600080fd5b8063467fcc871461047a57806355a8a4661461049a57806357a5472c146104bd5780635ada6acb146104d05780636383b24d146104f057806369b015c41461038f57600080fd5b8063248a9ca3116102c95780632dbeed5d116102a35780632dbeed5d1461042e5780632f2ff15d1461044157806336568abe14610454578063372aa0eb1461046757600080fd5b8063248a9ca3146103b7578063262d6152146103da57806327b3cc3d1461040557600080fd5b806301ffc9a71461031157806308f3cf001461033957806315e41c751461035a5780631645cdb81461037a578063172358721461038f5780631fbd4c1e146103a2575b600080fd5b61032461031f36600461225d565b610765565b60405190151581526020015b60405180910390f35b61034c61034736600461256d565b610790565b604051908152602001610330565b61036d61036836600461209d565b6107ce565b6040516103309190612718565b61034c60008051602061299683398151915281565b61032461039d366004612333565b610868565b6103b56103b0366004611fee565b61089b565b005b61034c6103c536600461209d565b60009081526065602052604090206001015490565b60ca546103ed906001600160a01b031681565b6040516001600160a01b039091168152602001610330565b6103ed61041336600461209d565b60cd602052600090815260409020546001600160a01b031681565b6103b561043c3660046120b6565b6108ca565b6103b561044f3660046120b6565b6109a7565b6103b56104623660046120b6565b6109ce565b6103b56104753660046120e6565b6109f0565b61034c61048836600461209d565b60d96020526000908152604090205481565b6103246104a8366004611fee565b60ce6020526000908152604090205460ff1681565b6103b56104cb366004612375565b610aec565b6104e36104de3660046122b3565b610b3d565b60405161033091906126d4565b6104e36104fe366004612231565b610b63565b6104e361051136600461220f565b610b7f565b61034c61052436600461209d565b610b8d565b61034c61053736600461209d565b60d16020526000908152604090205481565b6104e36105573660046125b9565b610b9a565b61034c61056a36600461209d565b610bd8565b61034c61057d36600461209d565b610be5565b6103ed61059036600461220f565b610bfc565b6103246105a33660046120b6565b610c14565b61034c610c3f565b61034c610c50565b61034c6000805160206129d683398151915281565b61034c600081565b6104e36105e336600461220f565b610c5c565b6104e36105f636600461220f565b610c6a565b61060e610609366004612485565b610c78565b604080519283526001600160a01b03909116602083015201610330565b61034c61063936600461209d565b610d08565b61032461064c36600461209d565b610d15565b61060e61065f366004612169565b610d22565b6103b56106723660046122e8565b6111d8565b61034c61133e565b61034c61068d36600461209d565b61134a565b61036d6106a036600461209d565b611361565b61034c6106b3366004612333565b61137a565b6103b56106c63660046120b6565b6113ad565b61034c6106d9366004612287565b6113b7565b61034c6106ec366004611fee565b6113d9565b6103b56106ff366004612028565b6113fa565b60c9546103ed906001600160a01b031681565b61034c6000805160206129b683398151915281565b61034c61073a36600461220f565b61169c565b6103b561074d3660046123c1565b6116b4565b61036d61076036600461209d565b61172b565b60006001600160e01b03198216635a05180f60e01b148061078a575061078a82611744565b92915050565b60006107c484846040516020016107a892919061264f565b604051602081830303815290604052805190602001208361169c565b90505b9392505050565b60d760205260009081526040902080546107e7906128d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610813906128d2565b80156108605780601f1061083557610100808354040283529160200191610860565b820191906000526020600020905b81548152906001019060200180831161084357829003601f168201915b505050505081565b60006107c7838360405160200161088092919061264f565b60405160208183030381529060405280519060200120610d15565b60006108a78133611779565b5060c980546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206129b68339815191526108e38133611779565b6108ee60cb846117dd565b1561092a5760405162461bcd60e51b81526020600482015260076024820152662165786973747360c81b60448201526064015b60405180910390fd5b61093560cb846117f5565b50600083815260cd6020908152604080832080546001600160a01b0319166001600160a01b03871690811790915580845260ce909252808320805460ff1916600117905551909185917ff971fd948b9be62bcf3cb3a7a663e95857b2eb95ac8a7478b0362d9583a691fe9190a3505050565b6109b18282611801565b60008281526097602052604090206109c99082611827565b505050565b6109d8828261183c565b60008281526097602052604090206109c990826118b6565b6000805160206129d6833981519152610a098133611779565b610a1460cb876117dd565b610a605760405162461bcd60e51b815260206004820152601760248201527f21737472617465677954797065206e6f7420666f756e640000000000000000006044820152606401610921565b6000610a6d60cf896117dd565b600089815260d1602090815260408083208b905560d29091529020909150610a96908787611eea565b50600088815260d360205260409020610ab0908585611eea565b5080151587897f128dde6be881a1aa689e72df1389c8775dc0db31307d824dc7c5d4013e42d72060405160405180910390a45050505050505050565b6000805160206129b6833981519152610b058133611779565b610b378484604051602001610b1b92919061264f565b60405160208183030381529060405280519060200120836108ca565b50505050565b6001600160a01b038316600090815260da602052604090206060906107c49084846118cb565b600083815260d4602052604090206060906107c49084846118cb565b60606107c760cb84846118cb565b600061078a60d5836119af565b6060610bcf8585604051602001610bb292919061264f565b604051602081830303815290604052805190602001208484610b63565b95945050505050565b600061078a60cb836119af565b600081815260d46020526040812061078a906119bb565b60008281526097602052604081206107c790836119af565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610c4b60cb6119bb565b905090565b6000610c4b60d56119bb565b60606107c760cf84846118cb565b60606107c760d584846118cb565b600080600080516020612996833981519152610c948133611779565b610cf48d8d604051602001610caa92919061264f565b604051602081830303815290604052805190602001208c8c604051602001610cd392919061264f565b604051602081830303815290604052805190602001208b8b8b8b8b8b610d22565b92509250509a509a98505050505050505050565b600061078a60cf836119af565b600061078a60cb836117dd565b600080600080516020612996833981519152610d3e8133611779565b6040805160a0810182526000808252602082018190529181018290526060808201929092526080810191909152610d9c8c8c604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b808252610dab9060d5906117dd565b151560208083019190915260008d815260d2909152604090208054610dcf906128d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfb906128d2565b8015610e485780601f10610e1d57610100808354040283529160200191610e48565b820191906000526020600020905b815481529060010190602001808311610e2b57829003601f168201915b50505050506080820190815260008d815260d16020908152604080832054835260cd909152908190205460c954925191516303555d2760e41b81526001600160a01b0391821693633555d27093610eac93909116918f91908f908f90600401612792565b602060405180830381600087803b158015610ec657600080fd5b505af1158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe919061200b565b6001600160a01b0390811660408084019190915260c954815163040f1f6d60e11b8152915192169163081e3eda91600480820192602092909190829003018186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f84919061260a565b606082015260c95460408051638da5cb5b60e01b815290516001600160a01b0390921691638da5cb5b91600480820192602092909190829003018186803b158015610fce57600080fd5b505afa158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611006919061200b565b604080830151905163ce192fc960e01b81526001600160a01b03918216600482015261ffff8816602482015291169063ce192fc990604401600060405180830381600087803b15801561105857600080fd5b505af115801561106c573d6000803e3d6000fd5b50508251600090815260d76020526040902061108c925090508888611eea565b50805160008d815260d4602052604090206110a6916117f5565b508051606082018051600090815260d9602090815260408083209490945591518451825260d88352838220558351838501518451632495a59960e01b8152945161117495929460da94936001600160a01b0390931692632495a5999260048083019392829003018186803b15801561111d57600080fd5b505afa158015611131573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611155919061200b565b6001600160a01b031681526020810191909152604001600020906117f5565b508a8c82606001517f05ff921a9f275cc75949cb0c8357b8866efe3e3bbd520b19b8cf59bf53c1a92584602001516040516111b3911515815260200190565b60405180910390a4806060015181604001519350935050509850989650505050505050565b600054610100900460ff16806111f1575060005460ff16155b61120d5760405162461bcd60e51b8152600401610921906127f3565b600054610100900460ff1615801561122f576000805461ffff19166101011790555b6112376119c5565b60c980546001600160a01b038087166001600160a01b0319928316811790935560ca8054918716919092161790556040805163040f1f6d60e11b8152905163081e3eda91600480820192602092909190829003018186803b15801561129b57600080fd5b505afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d3919061260a565b506112df600083611a51565b6112f76000805160206129b683398151915283611a51565b61130f6000805160206129d683398151915283611a51565b61132760008051602061299683398151915283611a51565b8015610b37576000805461ff001916905550505050565b6000610c4b60cf6119bb565b600081815260976020526040812061078a906119bb565b60d360205260009081526040902080546107e7906128d2565b60006107c7838360405160200161139292919061264f565b60405160208183030381529060405280519060200120610be5565b6109d88282611a5b565b6001600160a01b038216600090815260da602052604081206107c790836119af565b6001600160a01b038116600090815260da6020526040812061078a906119bb565b33600090815260ce602052604090205460ff166114475760405162461bcd60e51b815260206004820152600b60248201526a21737562666163746f727960a81b6044820152606401610921565b80156116985760008282600081811061146257611462612954565b90506020020160208101906114779190611fee565b905060008383611488600182612878565b81811061149757611497612954565b90506020020160208101906114ac9190611fee565b9050600060ca60009054906101000a90046001600160a01b03166001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fe57600080fd5b505afa158015611512573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611536919061200b565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156e57600080fd5b505afa158015611582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a6919061200b565b6040516331e376fd60e11b81526001600160a01b0385811660048301528481166024830152919250908216906363c6edfa9060440160206040518083038186803b1580156115f357600080fd5b505afa158015611607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162b919061260a565b6116945760405163131a049360e11b81526001600160a01b0382169063263409269061166190869086908a908a9060040161272b565b600060405180830381600087803b15801561167b57600080fd5b505af115801561168f573d6000803e3d6000fd5b505050505b5050505b5050565b600082815260d4602052604081206107c790836119af565b6000805160206129d68339815191526116cd8133611779565b61168f89896040516020016116e392919061264f565b60405160208183030381529060405280519060200120888860405160200161170c92919061264f565b60405160208183030381529060405280519060200120878787876109f0565b60d260205260009081526040902080546107e7906128d2565b60006001600160e01b03198216637965db0b60e01b148061078a57506301ffc9a760e01b6001600160e01b031983161461078a565b6117838282610c14565b6116985761179b816001600160a01b03166014611a81565b6117a6836020611a81565b6040516020016117b792919061265f565b60408051601f198184030181529082905262461bcd60e51b825261092191600401612718565b600081815260018301602052604081205415156107c7565b60006107c78383611c1d565b60008281526065602052604090206001015461181d8133611779565b6109c98383611c6c565b60006107c7836001600160a01b038416611c1d565b6001600160a01b03811633146118ac5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610921565b6116988282611cf2565b60006107c7836001600160a01b038416611d59565b606060006118d8856119bb565b90508084106118f75750506040805160008152602081019091526107c7565b806119028486612841565b1115611915576119128482612878565b92505b60008367ffffffffffffffff8111156119305761193061296a565b604051908082528060200260200182016040528015611959578160200160208202803683370190505b50905060005b848110156119a55761197c6119748288612841565b60cb906119af565b82828151811061198e5761198e612954565b5082915061199d90508161290d565b91505061195f565b5095945050505050565b60006107c78383611e4c565b600061078a825490565b600054610100900460ff16806119de575060005460ff16155b6119fa5760405162461bcd60e51b8152600401610921906127f3565b600054610100900460ff16158015611a1c576000805461ffff19166101011790555b611a24611e76565b611a2c611e76565b611a34611e76565b611a3c611e76565b8015611a4e576000805461ff00191690555b50565b6109b18282611ee0565b600082815260656020526040902060010154611a778133611779565b6109c98383611cf2565b60606000611a90836002612859565b611a9b906002612841565b67ffffffffffffffff811115611ab357611ab361296a565b6040519080825280601f01601f191660200182016040528015611add576020820181803683370190505b509050600360fc1b81600081518110611af857611af8612954565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b2757611b27612954565b60200101906001600160f81b031916908160001a9053506000611b4b846002612859565b611b56906001612841565b90505b6001811115611bce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b8a57611b8a612954565b1a60f81b828281518110611ba057611ba0612954565b60200101906001600160f81b031916908160001a90535060049490941c93611bc7816128bb565b9050611b59565b5083156107c75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610921565b6000818152600183016020526040812054611c645750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561078a565b50600061078a565b611c768282610c14565b6116985760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cae3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611cfc8282610c14565b156116985760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611e42576000611d7d600183612878565b8554909150600090611d9190600190612878565b9050818114611df6576000866000018281548110611db157611db1612954565b9060005260206000200154905080876000018481548110611dd457611dd4612954565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e0757611e0761293e565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061078a565b600091505061078a565b6000826000018281548110611e6357611e63612954565b9060005260206000200154905092915050565b600054610100900460ff1680611e8f575060005460ff16155b611eab5760405162461bcd60e51b8152600401610921906127f3565b600054610100900460ff16158015611a3c576000805461ffff19166101011790558015611a4e576000805461ff001916905550565b6116988282611c6c565b828054611ef6906128d2565b90600052602060002090601f016020900481019282611f185760008555611f5e565b82601f10611f315782800160ff19823516178555611f5e565b82800160010185558215611f5e579182015b82811115611f5e578235825591602001919060010190611f43565b50611f6a929150611f6e565b5090565b5b80821115611f6a5760008155600101611f6f565b60008083601f840112611f9557600080fd5b50813567ffffffffffffffff811115611fad57600080fd5b602083019150836020828501011115611fc557600080fd5b9250929050565b8035611fd781612980565b919050565b803561ffff81168114611fd757600080fd5b60006020828403121561200057600080fd5b81356107c781612980565b60006020828403121561201d57600080fd5b81516107c781612980565b6000806020838503121561203b57600080fd5b823567ffffffffffffffff8082111561205357600080fd5b818501915085601f83011261206757600080fd5b81358181111561207657600080fd5b8660208260051b850101111561208b57600080fd5b60209290920196919550909350505050565b6000602082840312156120af57600080fd5b5035919050565b600080604083850312156120c957600080fd5b8235915060208301356120db81612980565b809150509250929050565b600080600080600080608087890312156120ff57600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561212557600080fd5b6121318a838b01611f83565b9096509450606089013591508082111561214a57600080fd5b5061215789828a01611f83565b979a9699509497509295939492505050565b60008060008060008060008060c0898b03121561218557600080fd5b8835975060208901359650604089013561219e81612980565b9550606089013567ffffffffffffffff808211156121bb57600080fd5b6121c78c838d01611f83565b909750955060808b01359150808211156121e057600080fd5b506121ed8b828c01611f83565b9094509250612200905060a08a01611fdc565b90509295985092959890939650565b6000806040838503121561222257600080fd5b50508035926020909101359150565b60008060006060848603121561224657600080fd5b505081359360208301359350604090920135919050565b60006020828403121561226f57600080fd5b81356001600160e01b0319811681146107c757600080fd5b6000806040838503121561229a57600080fd5b82356122a581612980565b946020939093013593505050565b6000806000606084860312156122c857600080fd5b83356122d381612980565b95602085013595506040909401359392505050565b6000806000606084860312156122fd57600080fd5b833561230881612980565b9250602084013561231881612980565b9150604084013561232881612980565b809150509250925092565b6000806020838503121561234657600080fd5b823567ffffffffffffffff81111561235d57600080fd5b61236985828601611f83565b90969095509350505050565b60008060006040848603121561238a57600080fd5b833567ffffffffffffffff8111156123a157600080fd5b6123ad86828701611f83565b909450925050602084013561232881612980565b6000806000806000806000806080898b0312156123dd57600080fd5b883567ffffffffffffffff808211156123f557600080fd5b6124018c838d01611f83565b909a50985060208b013591508082111561241a57600080fd5b6124268c838d01611f83565b909850965060408b013591508082111561243f57600080fd5b61244b8c838d01611f83565b909650945060608b013591508082111561246457600080fd5b506124718b828c01611f83565b999c989b5096995094979396929594505050565b60008060008060008060008060008060c08b8d0312156124a457600080fd5b8a3567ffffffffffffffff808211156124bc57600080fd5b6124c88e838f01611f83565b909c509a5060208d01359150808211156124e157600080fd5b6124ed8e838f01611f83565b909a50985088915061250160408e01611fcc565b975060608d013591508082111561251757600080fd5b6125238e838f01611f83565b909750955060808d013591508082111561253c57600080fd5b506125498d828e01611f83565b909450925061255c905060a08c01611fdc565b90509295989b9194979a5092959850565b60008060006040848603121561258257600080fd5b833567ffffffffffffffff81111561259957600080fd5b6125a586828701611f83565b909790965060209590950135949350505050565b600080600080606085870312156125cf57600080fd5b843567ffffffffffffffff8111156125e657600080fd5b6125f287828801611f83565b90989097506020870135966040013595509350505050565b60006020828403121561261c57600080fd5b5051919050565b6000815180845261263b81602086016020860161288f565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161269781601785016020880161288f565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126c881602884016020880161288f565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561270c578351835292840192918401916001016126f0565b50909695505050505050565b6020815260006107c76020830184612623565b6001600160a01b0385811682528481166020808401919091526060604084018190528301849052600091859160808501845b8781101561278457843561277081612980565b84168252938201939082019060010161275d565b509998505050505050505050565b6001600160a01b038681168252851660208201526080604082018190526000906127be90830186612623565b8281036060840152838152838560208301376000602085830101526020601f19601f8601168201019150509695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561285457612854612928565b500190565b600081600019048311821515161561287357612873612928565b500290565b60008282101561288a5761288a612928565b500390565b60005b838110156128aa578181015183820152602001612892565b83811115610b375750506000910152565b6000816128ca576128ca612928565b506000190190565b600181811c908216806128e657607f821691505b6020821081141561290757634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561292157612921612928565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a4e57600080fdfedf8db4b3f0e355fdb17cbf7574c8af9d27ce4756db4efb6006ec8d3f04f391c4e71ec9665f24fd34c984715bd779a0519d33e9ab5ea271286986ff1d631504cf2346b08f6a458a95934836936988f77c5b147e7700d817767c56316d1a6f469ca2646970667358221220e85c6936afea04b18170d1098a7b274e5abb5a6842c5bd31090fb6f2fd408b5164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "strategies": {
        "details": "These are identified as keccak256(abi.encodePacked(keccak256(projectId), keccak256(strategyId)))."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getProjectAt(uint256)": {
        "notice": "Gets the project hash at a specific index in the listing."
      },
      "getProjectStrategies(string,uint256,uint256)": {
        "notice": "Lists the project's strategy hashes within a specific range in the listing."
      },
      "getProjectStrategiesLength(string)": {
        "notice": "Gets the length (number) of strategies of a project listing."
      },
      "getProjectStrategiesLengthRaw(bytes32)": {
        "notice": "Gets the length (number) of strategies of a project listing."
      },
      "getProjectStrategiesRaw(bytes32,uint256,uint256)": {
        "notice": "Lists the project's strategy hashes within a specific range in the listing."
      },
      "getProjectStrategyAt(string,uint256)": {
        "notice": "Gets the project's strategy hash at a specific index in the listing."
      },
      "getProjectStrategyAtRaw(bytes32,uint256)": {
        "notice": "Gets the project's strategy hash at a specific index in the listing."
      },
      "getProjects(uint256,uint256)": {
        "notice": "Lists the project hashes within a specific range in the listing."
      },
      "getProjectsLength()": {
        "notice": "Gets the length of the projects listing."
      },
      "getStrategies(uint256,uint256)": {
        "notice": "Lists the strategy hashes within a specific range in the listing."
      },
      "getStrategiesLength()": {
        "notice": "Gets the length (number) of strategies of a project listing."
      },
      "getStrategyAt(uint256)": {
        "notice": "Gets the strategy hash at a specific index in the listing."
      },
      "getStrategyTypeAt(uint256)": {
        "notice": "Gets the strategyType hash at a specific index in the listing."
      },
      "getStrategyTypeLength()": {
        "notice": "Gets the length of the strategyType listing."
      },
      "getStrategyTypes(uint256,uint256)": {
        "notice": "Lists the strategyType hashes within a specific range in the listing."
      },
      "getUnderlyingStrategies(address,uint256,uint256)": {
        "notice": "Lists the underlying tokens's strategy hashes within a specific range in the listing."
      },
      "getUnderlyingStrategiesLength(address)": {
        "notice": "Gets the length (number) of strategies of a project listing."
      },
      "getUnderlyingStrategyAt(address,uint256)": {
        "notice": "Gets the underlying tokens's strategy hash at a specific index in the listing."
      },
      "isProject(string)": {
        "notice": "Returns whether the unhashed `projectId` is registered."
      },
      "isProjectRaw(bytes32)": {
        "notice": "Returns whether the hashed `projectId` is registered."
      },
      "isStrategyType(string)": {
        "notice": "Returns whether the unhashed `strategyType` is registered."
      },
      "isStrategyTypeRaw(bytes32)": {
        "notice": "Returns whether the hashed `strategyType` is registered."
      },
      "projectMetadata(bytes32)": {
        "notice": "Metadata associated with the project that can be used on the frontend, expected to be encoded in UTF-8 JSON.Even though not ideomatic, this is a cheap solution to avoid infrastructure downtime within the first months after launch."
      },
      "projectParams(bytes32)": {
        "notice": "Generic parameters that will always be forwarded to the subfactory. This could for example be the native token."
      },
      "projectStrategyType(bytes32)": {
        "notice": "The associated strategy type hash of the project. All strategies under the project will thus be deployed using the subfactory of this strategy type."
      },
      "strategyMetadata(bytes32)": {
        "notice": "Metadata associated with the strategy that can be used on the frontend, expected to be encoded in UTF-8 JSON.Even though not ideomatic, this is a cheap solution to avoid infrastructure downtime within the first months after launch."
      },
      "subfactoryByType(bytes32)": {
        "notice": "Returns the registered subfactory of the strategy type. The subfactory is responsible for instantiating factories."
      },
      "vaultChef()": {
        "notice": "The instance of the vaultChef to deploy strategies to."
      },
      "vaultIdToStrategy(uint256)": {
        "notice": "Gets the strategy id associated with the vaultId."
      },
      "zap()": {
        "notice": "The zapper"
      }
    },
    "notice": "TODO: There is no createVault function!",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 648,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 731,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 980,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 258,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)"
      },
      {
        "astId": 543,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 45,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1305_storage)"
      },
      {
        "astId": 208,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5083,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "vaultChef",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IVaultChef)7187"
      },
      {
        "astId": 5087,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "zap",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IZap)7456"
      },
      {
        "astId": 5091,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "strategyTypes",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(Bytes32Set)1198_storage"
      },
      {
        "astId": 5097,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "subfactoryByType",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_bytes32,t_contract(ISubFactory)7172)"
      },
      {
        "astId": 5101,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "isSubfactory",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5105,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "projects",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(Bytes32Set)1198_storage"
      },
      {
        "astId": 5110,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "projectStrategyType",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 5115,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "projectParams",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 5120,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "projectMetadata",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 5126,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "projectStrategies",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_bytes32,t_struct(Bytes32Set)1198_storage)"
      },
      {
        "astId": 5130,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "strategies",
        "offset": 0,
        "slot": "213",
        "type": "t_struct(Bytes32Set)1198_storage"
      },
      {
        "astId": 5135,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "strategyMetadata",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 5140,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "strategyToVaultId",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5145,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "vaultIdToStrategy",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 5152,
        "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
        "label": "underlyingToStrategies",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_contract(IERC20)2338,t_struct(Bytes32Set)1198_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2338": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISubFactory)7172": {
        "encoding": "inplace",
        "label": "contract ISubFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultChef)7187": {
        "encoding": "inplace",
        "label": "contract IVaultChef",
        "numberOfBytes": "20"
      },
      "t_contract(IZap)7456": {
        "encoding": "inplace",
        "label": "contract IZap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_contract(ISubFactory)7172)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract ISubFactory)",
        "numberOfBytes": "32",
        "value": "t_contract(ISubFactory)7172"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1305_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1305_storage"
      },
      "t_mapping(t_bytes32,t_struct(Bytes32Set)1198_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1198_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)253_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)2338,t_struct(Bytes32Set)1198_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2338",
        "label": "mapping(contract IERC20 => struct EnumerableSetUpgradeable.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1198_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(AddressSet)1305_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1304,
            "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1004_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)1198_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Bytes32Set",
        "members": [
          {
            "astId": 1197,
            "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1004_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)253_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 250,
            "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 252,
            "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1004_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 999,
            "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1003,
            "contract": "contracts/factories/StrategyFactory.sol:StrategyFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}